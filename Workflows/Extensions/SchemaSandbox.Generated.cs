//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace SchemaSandbox
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class PresentationDefinition
    {
    
        private string _alias;
    
        private string _texture;
    
        private double _duration;
    
        private bool _shouldRotate;
    
        public PresentationDefinition()
        {
        }
    
        protected PresentationDefinition(PresentationDefinition other)
        {
            _alias = other._alias;
            _texture = other._texture;
            _duration = other._duration;
            _shouldRotate = other._shouldRotate;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="alias")]
        public string Alias
        {
            get
            {
                return _alias;
            }
            set
            {
                _alias = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="texture")]
        public string Texture
        {
            get
            {
                return _texture;
            }
            set
            {
                _texture = value;
            }
        }
    
        /// <summary>
        /// Duration of this presentation in seconds.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="duration")]
        [System.ComponentModel.DescriptionAttribute("Duration of this presentation in seconds.")]
        public double Duration
        {
            get
            {
                return _duration;
            }
            set
            {
                _duration = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="shouldRotate")]
        public bool ShouldRotate
        {
            get
            {
                return _shouldRotate;
            }
            set
            {
                _shouldRotate = value;
            }
        }
    
        public System.IObservable<PresentationDefinition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new PresentationDefinition(this)));
        }
    
        public System.IObservable<PresentationDefinition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new PresentationDefinition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("alias = " + _alias + ", ");
            stringBuilder.Append("texture = " + _texture + ", ");
            stringBuilder.Append("duration = " + _duration + ", ");
            stringBuilder.Append("shouldRotate = " + _shouldRotate);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SessionDefinition
    {
    
        private PresentationDefinition _initiationSequence;
    
        private System.Collections.Generic.List<PresentationDefinition> _loopSequence = new System.Collections.Generic.List<PresentationDefinition>();
    
        private PresentationDefinition _endSequence;
    
        private int _repeats;
    
        private double _initialRotation;
    
        private System.Collections.Generic.List<double> _rotationSteps = new System.Collections.Generic.List<double>();
    
        public SessionDefinition()
        {
        }
    
        protected SessionDefinition(SessionDefinition other)
        {
            _initiationSequence = other._initiationSequence;
            _loopSequence = other._loopSequence;
            _endSequence = other._endSequence;
            _repeats = other._repeats;
            _initialRotation = other._initialRotation;
            _rotationSteps = other._rotationSteps;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initiationSequence")]
        public PresentationDefinition InitiationSequence
        {
            get
            {
                return _initiationSequence;
            }
            set
            {
                _initiationSequence = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="loopSequence")]
        public System.Collections.Generic.List<PresentationDefinition> LoopSequence
        {
            get
            {
                return _loopSequence;
            }
            set
            {
                _loopSequence = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="endSequence")]
        public PresentationDefinition EndSequence
        {
            get
            {
                return _endSequence;
            }
            set
            {
                _endSequence = value;
            }
        }
    
        /// <summary>
        /// How many times to run the sequence in loopSequence.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="repeats")]
        [System.ComponentModel.DescriptionAttribute("How many times to run the sequence in loopSequence.")]
        public int Repeats
        {
            get
            {
                return _repeats;
            }
            set
            {
                _repeats = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="initialRotation")]
        public double InitialRotation
        {
            get
            {
                return _initialRotation;
            }
            set
            {
                _initialRotation = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rotationSteps")]
        public System.Collections.Generic.List<double> RotationSteps
        {
            get
            {
                return _rotationSteps;
            }
            set
            {
                _rotationSteps = value;
            }
        }
    
        public System.IObservable<SessionDefinition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SessionDefinition(this)));
        }
    
        public System.IObservable<SessionDefinition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SessionDefinition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("initiationSequence = " + _initiationSequence + ", ");
            stringBuilder.Append("loopSequence = " + _loopSequence + ", ");
            stringBuilder.Append("endSequence = " + _endSequence + ", ");
            stringBuilder.Append("repeats = " + _repeats + ", ");
            stringBuilder.Append("initialRotation = " + _initialRotation + ", ");
            stringBuilder.Append("rotationSteps = " + _rotationSteps);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class SchemaSandbox
    {
    
        private string _animalID;
    
        private string _loggingPath;
    
        private SessionDefinition _sessionDefinition;
    
        public SchemaSandbox()
        {
        }
    
        protected SchemaSandbox(SchemaSandbox other)
        {
            _animalID = other._animalID;
            _loggingPath = other._loggingPath;
            _sessionDefinition = other._sessionDefinition;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animalID")]
        public string AnimalID
        {
            get
            {
                return _animalID;
            }
            set
            {
                _animalID = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="loggingPath")]
        public string LoggingPath
        {
            get
            {
                return _loggingPath;
            }
            set
            {
                _loggingPath = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sessionDefinition")]
        public SessionDefinition SessionDefinition
        {
            get
            {
                return _sessionDefinition;
            }
            set
            {
                _sessionDefinition = value;
            }
        }
    
        public System.IObservable<SchemaSandbox> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new SchemaSandbox(this)));
        }
    
        public System.IObservable<SchemaSandbox> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new SchemaSandbox(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("animalID = " + _animalID + ", ");
            stringBuilder.Append("loggingPath = " + _loggingPath + ", ");
            stringBuilder.Append("sessionDefinition = " + _sessionDefinition);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<PresentationDefinition> source)
        {
            return Process<PresentationDefinition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SessionDefinition> source)
        {
            return Process<SessionDefinition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<SchemaSandbox> source)
        {
            return Process<SchemaSandbox>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<PresentationDefinition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SessionDefinition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<SchemaSandbox>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<SchemaSandbox>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}