<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bonsai.Vision</name>
    </assembly>
    <members>
        <member name="T:Bonsai.Vision.AdaptiveThreshold">
            <summary>
            Represents an operator that applies an adaptive threshold to every grayscale
            image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.AdaptiveThreshold.MaxValue">
            <summary>
            Gets or sets the value assigned to pixels determined to be above the threshold.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.AdaptiveThreshold.AdaptiveMethod">
            <summary>
            Gets or sets a value specifying the adaptive threshold algorithm used
            to process the image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.AdaptiveThreshold.ThresholdType">
            <summary>
            Gets or sets the a value specifying the type of binary threshold to apply
            to individual pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.AdaptiveThreshold.BlockSize">
            <summary>
            Gets or sets the size of the pixel neighborhood used to calculate the
            threshold for a pixel.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.AdaptiveThreshold.Parameter">
            <summary>
            Gets or sets an algorithm dependent constant subtracted from the mean or weighted mean.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.AdaptiveThreshold.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Applies an adaptive threshold to every grayscale image in an observable
            sequence.
            </summary>
            <param name="source">The sequence of images to threshold.</param>
            <returns>The sequence of thresholded images.</returns>
        </member>
        <member name="T:Bonsai.Vision.AffineTransform">
            <summary>
            Represents an operator that creates an affine transformation matrix specified
            by a translation, rotation and scale.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.AffineTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.AffineTransform"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.AffineTransform.Pivot">
            <summary>
            Gets or sets the pivot around which to scale or rotate the image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.AffineTransform.Translation">
            <summary>
            Gets or sets the translation vector to apply to the image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.AffineTransform.Rotation">
            <summary>
            Gets or sets the rotation angle around the pivot, in radians.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.AffineTransform.Scale">
            <summary>
            Gets or sets the scale factor to apply to individual image dimensions.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.AffineTransform.Process">
            <summary>
            Generates an observable sequence that contains an affine transformation
            matrix specified by a translation, rotation and scale.
            </summary>
            <returns>
            A sequence containing a single instance of the <see cref="T:OpenCV.Net.Mat"/>
            class representing an affine transformation matrix.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.AffineTransform.Process``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of affine transformation matrices using
            the specified translation, rotation and scale, and where each matrix is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new affine
            transformation matrices.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects where each element
            represents an affine transformation matrix.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.ApproximatePolygon">
            <summary>
            Represents an operator that approximates each polygonal curve in the sequence
            with the specified precision.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ApproximatePolygon.Method">
            <summary>
            Gets or sets a value specifying the polygon approximation method.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ApproximatePolygon.Eps">
            <summary>
            Gets or sets the desired approximation accuracy.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ApproximatePolygon.Recursive">
            <summary>
            Gets or sets a value specifying whether approximation should proceed
            for all hierarchical levels.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ApproximatePolygon.Process(System.IObservable{Bonsai.Vision.Contours})">
            <summary>
            Approximates each polygonal curve in an observable sequence with the
            specified precision.
            </summary>
            <param name="source">A sequence of polygonal curves to approximate.</param>
            <returns>A sequence of the approximated polygonal curves.</returns>
        </member>
        <member name="T:Bonsai.Vision.AverageBinaryRegion">
            <summary>
            Represents an operator that computes the average binary region from
            each collection of connected components in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.AverageBinaryRegion.Process(System.IObservable{Bonsai.Vision.ConnectedComponentCollection})">
            <summary>
            Computes the average binary region from each collection of connected
            components in an observable sequence.
            </summary>
            <param name="source">A sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects.</param>
            <returns>
            A <see cref="T:Bonsai.Vision.ConnectedComponent"/> representing the average binary region
            from each collection of connected components in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.BackgroundSubtraction">
            <summary>
            Represents an operator that performs image segmentation of every frame in
            the sequence using an online estimation of the background.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.BackgroundSubtraction.BackgroundFrames">
            <summary>
            Gets or sets the number of frames to use for initial background estimation.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.BackgroundSubtraction.AdaptationRate">
            <summary>
            Gets or sets a value determining how fast the online estimation of the
            background is adapted.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.BackgroundSubtraction.ThresholdValue">
            <summary>
            Gets or sets the threshold value used to test whether individual pixels
            are foreground or background.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.BackgroundSubtraction.ThresholdType">
            <summary>
            Gets or sets a value specifying the type of threshold to apply to
            individual pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.BackgroundSubtraction.SubtractionMethod">
            <summary>
            Gets or sets a value specifying the subtraction method used to isolate
            foreground pixels.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.BackgroundSubtraction.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Performs image segmentation of every frame in an observable sequence
            using an online estimation of the background.
            </summary>
            <param name="source">
            The sequence of frames on which to perform image segmentation.
            </param>
            <returns>
            The sequence of images which have been segmented into foreground and
            background pixels.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.SubtractionMethod">
            <summary>
            Specifies the subtraction method used to isolate foreground pixels.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.SubtractionMethod.Absolute">
            <summary>
            Take the absolute difference between the online estimation of the background
            and the current frame so that any pixels which are different from the
            the background can be considered foreground.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.SubtractionMethod.Bright">
            <summary>
            Subtract the online estimation of the background from the current image so
            that only pixels which are brighter than the background can be classified
            as foreground.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.SubtractionMethod.Dark">
            <summary>
            Subtract the current image from the online estimation of the background so
            that only pixels which are darker than the background can be classified
            as foreground.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.BinaryRegionAnalysis">
            <summary>
            Represents an operator that computes image moments from polygonal contours
            or individual frames in the sequence to extract binary region properties.
            </summary>
            <remarks>
            If the area of any of the extracted connected components is zero, the
            centroid and orientation angle for that connected component will be set to
            <see cref="F:System.Single.NaN"/>.
            </remarks>
        </member>
        <member name="M:Bonsai.Vision.BinaryRegionAnalysis.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Computes image moments from individual frames in an observable sequence
            to extract binary region properties.
            </summary>
            <param name="source">
            A sequence of rasterized shapes where every non-zero pixel is treated
            as having a weight of one.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.ConnectedComponent"/> objects containing the
            binary region measurements for all the pixels in the image considered
            as a single object.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.BinaryRegionAnalysis.Process(System.IObservable{OpenCV.Net.Seq})">
            <summary>
            Computes image moments from individual polygons in an observable sequence
            to extract binary region properties.
            </summary>
            <param name="source">
            A sequence of polygons for which to compute binary region properties.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.ConnectedComponent"/> objects containing the
            binary region measurements for all the polygons in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.BinaryRegionAnalysis.Process(System.IObservable{Bonsai.Vision.Contours})">
            <summary>
            Computes image moments from polygonal contours in an observable sequence
            to extract binary region properties.
            </summary>
            <param name="source">
            A sequence of hierarchical polygonal contours for which to compute binary
            region properties.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects containing the
            binary region measurements for all the polygons in the hierarchy of polygonal
            contours.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.BinaryRegionAnalysis.Process(System.IObservable{System.Tuple{Bonsai.Vision.Contours,OpenCV.Net.IplImage}})">
            <summary>
            Computes image moments from polygonal contours in an observable sequence
            to extract binary region properties, where each binary region will be
            associated with a corresponding patch of pixels.
            </summary>
            <param name="source">
            A sequence of hierarchical polygonal contours for which to compute binary
            region properties, paired with the image from which they were extracted.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects containing the
            binary region measurements for all the polygons in the hierarchy of polygonal
            contours. Each binary region will be associated with the subregion of the
            paired image corresponding to the bounding box of the binary region shape.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.BinaryRegionExtremes">
            <summary>
            Represents an operator that computes the extremities, or endpoints, of each
            connected component in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.BinaryRegionExtremes.Method">
            <summary>
            Gets or sets a value specifying the method used to compute the extremities
            of each connected component.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.BinaryRegionExtremes.Process(System.IObservable{Bonsai.Vision.ConnectedComponent})">
            <summary>
            Computes the extremities, or endpoints, of each connected component in
            an observable sequence.
            </summary>
            <param name="source">
            The sequence of connected components for which to compute the extremities.
            </param>
            <returns>
            A pair of vertices specifying the two extremities, or endpoints, of each
            connected component in the sequence. If the connected component has no
            vertices, the endpoint coordinates will be set to <see cref="F:System.Single.NaN"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.FindExtremesMethod">
            <summary>
            Specifies the method used to compute extremities of connected components.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.FindExtremesMethod.Horizontal">
            <summary>
            The first extremity will be the vertex furthest to the right, and the
            second extremity the vertex furthest to the left, in image coordinates. 
            </summary>
        </member>
        <member name="F:Bonsai.Vision.FindExtremesMethod.Vertical">
            <summary>
            The first extremity will be the vertex nearest to the bottom of the image,
            and the second extremity the vertex nearest to the top of the image. 
            </summary>
        </member>
        <member name="F:Bonsai.Vision.FindExtremesMethod.MajorAxis">
            <summary>
            The first extremity will be the vertex furthest along the major axis of the
            ellipse fit to the connected component, moving clockwise, and the second
            extremity will be the vertex furthest along the major axis of the ellipse,
            moving anti-clockwise.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.FindExtremesMethod.MajorAxisVertex">
            <summary>
            The first extremity will be the first clockwise vertex of the ellipse fit
            to the connected component and the second extremity the first anti-clockwise
            vertex of the ellipse.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.FindExtremesMethod.Radial">
            <summary>
            The first extremity will be the vertex furthest away from the centroid of
            the connected component, and the second extremity will be the vertex
            furthest away from the first extremity.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.CalibrateCameraChessboard">
            <summary>
            Represents an operator that finds the camera intrinsic parameters from
            several views of a chessboard calibration pattern.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CalibrateCameraChessboard.PatternSize">
            <summary>
            Gets or sets the number of inner corners per chessboard row and column.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CalibrateCameraChessboard.CalibrationFlags">
            <summary>
            Gets or sets a value specifying the operation flags used for calibrating
            camera intrinsics.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CalibrateCameraChessboard.Process(System.IObservable{Bonsai.Vision.KeyPointCollection})">
            <summary>
            Finds the camera intrinsic parameters from an observable sequence of
            views of a chessboard calibration pattern.
            </summary>
            <param name="source">
            A sequence of image features extracted from different views of a
            chessboard calibration pattern.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.CameraCalibration"/> objects containing the camera
            intrinsic parameters and current re-projection error after processing
            each view of the chessboard pattern.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CalibrateCameraChessboard.Process(System.IObservable{Bonsai.Vision.KeyPointCollection[]})">
            <summary>
            Finds the camera intrinsic parameters from an observable sequence of
            batches of views of a chessboard calibration pattern.
            </summary>
            <param name="source">
            A sequence of image features extracted from different views of a
            chessboard calibration pattern.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.CameraCalibration"/> objects containing the camera
            intrinsic parameters and current re-projection error after processing
            each batch of views of the chessboard pattern.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CameraCalibration">
            <summary>
            Represents the result of a camera calibration algorithm, including
            the camera intrinsic parameters and an estimate of the re-projection
            error.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.CameraCalibration.Intrinsics">
            <summary>
            The parameters that describe the camera intrinsic properties such
            as the focal length or lens distortion.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.CameraCalibration.ReprojectionError">
            <summary>
            The final re-projection error of the camera calibration.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CameraCalibration.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this
            <see cref="T:Bonsai.Vision.CameraCalibration"/> structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing all the parameter values of this
            <see cref="T:Bonsai.Vision.CameraCalibration"/> structure.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CameraCapture">
            <summary>
            Represents an operator that generates a sequence of images acquired from
            the specified camera.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CameraCapture.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.CameraCapture"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CameraCapture.Index">
            <summary>
            Gets or sets the index of the camera from which to acquire images.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CameraCapture.CaptureProperties">
            <summary>
            Gets the set of capture properties assigned to the camera.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CameraCapture.Generate">
            <summary>
            Generates an observable sequence of images acquired from
            the camera with the specified index.
            </summary>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing each frame
            acquired from the camera.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Canny">
            <summary>
            Represents an operator that applies the Canny algorithm for edge detection to each
            image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Canny.Threshold1">
            <summary>
            Gets or sets the first threshold. The smallest threshold is used for edge
            linking and the largest to find initial edge segments.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Canny.Threshold2">
            <summary>
            Gets or sets the second threshold. The smallest threshold is used for edge
            linking and the largest to find initial edge segments.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Canny.ApertureSize">
            <summary>
            Gets or sets the aperture parameter for the Sobel operator.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Canny.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Applies the Canny algorithm for edge detection to each image in an
            observable sequence.
            </summary>
            <param name="source">The sequence of images from which to extract edges.</param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects where each non-zero pixel
            represents an image element which has been classified as an edge.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CapturePropertyAssignment">
            <summary>
            Represents a value that will be assigned to the specified camera or video
            file property upon initialization.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CapturePropertyAssignment.Property">
            <summary>
            Gets or sets the property that the value will be assigned to.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CapturePropertyAssignment.Value">
            <summary>
            Gets or sets the value to be assigned to the property.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CapturePropertyAssignment.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this
            <see cref="T:Bonsai.Vision.CapturePropertyAssignment"/> object.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the name of the property and the value
            to be assigned by this <see cref="T:Bonsai.Vision.CapturePropertyAssignment"/> object.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CapturePropertyCollection">
            <summary>
            Represents a collection of property values that will be assigned
            to the specified camera or video file upon initialization.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CapturePropertyCollection.Capture">
            <summary>
            Gets the video capture stream that the properties will be assigned to.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.Centroid">
            <summary>
            Represents an operator that computes the centroid of each set of points,
            image moments, or polygonal contour in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Centroid.Process(System.IObservable{OpenCV.Net.Point[]})">
            <summary>
            Computes the centroid of each array of points in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:OpenCV.Net.Point"/> arrays for which to compute the centroid.
            </param>
            <returns>
            A <see cref="T:OpenCV.Net.Point2f"/> value representing the centroid of each of
            the array of points in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Centroid.Process(System.IObservable{System.Collections.Generic.IEnumerable{OpenCV.Net.Point}})">
            <summary>
            Computes the centroid of each collection of points in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:OpenCV.Net.Point"/> collections for which to compute the centroid.
            </param>
            <returns>
            A <see cref="T:OpenCV.Net.Point2f"/> value representing the centroid of each collection of
            points in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Centroid.Process(System.IObservable{OpenCV.Net.Point2f[]})">
            <summary>
            Computes the centroid of each array of points in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:OpenCV.Net.Point2f"/> arrays for which to compute the centroid.
            </param>
            <returns>
            A <see cref="T:OpenCV.Net.Point2f"/> value representing the centroid of each of
            the array of points in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Centroid.Process(System.IObservable{System.Collections.Generic.IEnumerable{OpenCV.Net.Point2f}})">
            <summary>
            Computes the centroid of each collection of points in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:OpenCV.Net.Point2f"/> collections for which to compute the centroid.
            </param>
            <returns>
            A <see cref="T:OpenCV.Net.Point2f"/> value representing the centroid of each collection of
            points in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Centroid.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Computes the centroid of each image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images for which to compute the centroid, where each
            pixel is weighed according to its intensity value.
            </param>
            <returns>
            A <see cref="T:OpenCV.Net.Point2f"/> value representing the centroid of each image
            in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Centroid.Process(System.IObservable{OpenCV.Net.Contour})">
            <summary>
            Computes the centroid of each polygonal contour in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:OpenCV.Net.Contour"/> objects for which to compute the centroid.
            </param>
            <returns>
            A <see cref="T:OpenCV.Net.Point2f"/> value representing the centroid of each polygonal
            contour in the sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Centroid.Process(System.IObservable{Bonsai.Vision.ConnectedComponent})">
            <summary>
            Extracts the centroid of each connected component in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:Bonsai.Vision.ConnectedComponent"/> objects for which to
            extract the centroid.
            </param>
            <returns>
            A <see cref="T:OpenCV.Net.Point2f"/> value representing the centroid of each connected
            component in the sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Circle">
            <summary>
            Represents the parameters of a circle.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.Circle.Center">
            <summary>
            The center of the circle.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.Circle.Radius">
            <summary>
            The radius of the circle.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Circle.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this
            <see cref="T:Bonsai.Vision.Circle"/> structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing all the parameter values of this
            <see cref="T:Bonsai.Vision.Circle"/> structure.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.ColorBalance">
            <summary>
            Represents an operator that applies an independent scale to the color channels
            of every image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ColorBalance.Scale">
            <summary>
            Gets or sets the scale factor applied to every color channel of the image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ColorBalance.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Applies an independent scale to the color channels of every image in an
            observable sequence.
            </summary>
            <param name="source">A sequence of multi-channel images.</param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects where every channel has
            been multiplied by the corresponding scale factor.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CompressionParameterAssignment">
            <summary>
            Provides an abstract base class for configuring various image
            compression parameters.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CompressionParameterAssignment.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of the
            compression parameter.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the parameter name and the value
            to be assigned by this object.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.JpegQuality">
            <summary>
            Provides a class for specifying the quality of image JPEG compression.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.JpegQuality.Value">
            <summary>
            Gets or sets a value specifying the quality of image JPEG compression
            from 0 to 100 (the higher the better). Default value is 95.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.PngCompressionLevel">
            <summary>
            Provides a class for specifying the PNG compression level.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.PngCompressionLevel.Value">
            <summary>
            Gets or sets a value specifying the PNG compression level from 0 to 9.
            A higher value means a smaller size and longer compression time.
            Default value is 3.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.PngCompressionStrategy">
            <summary>
            Provides a class for specifying the PNG compression strategy.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.PngCompressionStrategy.Value">
            <summary>
            Gets or sets a value specifying the PNG compression strategy.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.PngBiLevelCompression">
            <summary>
            Provides a class for specifying whether PNG bi-level compression.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.PngBiLevelCompression.Value">
            <summary>
            Gets or sets a value indicating whether PNG compression should use
            bi-level (binary) images.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.PxmBinaryFormat">
            <summary>
            Provides a class for specifying a binary format flag for PPM, PGM or PBM.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.PxmBinaryFormat.Value">
            <summary>
            Gets or sets a value specifying a binary format flag for PPM, PGM or PBM.
            Default value is 1.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.PngCompression">
            <summary>
            Specifies the available PNG compression strategies.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.PngCompression.Default">
            <summary>
            Specifies the default PNG compression strategy.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.PngCompression.Filtered">
            <summary>
            Specifies a filtered PNG compression strategy.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.PngCompression.HuffmanOnly">
            <summary>
            Specifies a huffman code based PNG compression strategy.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.PngCompression.RunLengthEncoding">
            <summary>
            Specifies a run-length encoding PNG compression strategy.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.PngCompression.Fixed">
            <summary>
            Specifies a fixed PNG compression strategy.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.CompressionParameterCollection">
            <summary>
            Represents a collection of compression parameters used to encode individual
            images in the <see cref="T:Bonsai.Vision.EncodeImage"/> operator.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.ConnectedComponent">
            <summary>
            Represents a collection of measurements extracted from a cluster of
            connected pixels in an image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ConnectedComponent.Centroid">
            <summary>
            Gets or sets the center of mass of the connected component.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ConnectedComponent.Orientation">
            <summary>
            Gets or sets the angle, in radians, between the x-axis and the
            major axis of the ellipse fit to the connected component.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ConnectedComponent.MajorAxisLength">
            <summary>
            Gets or sets the length, in pixels, of the major axis of the
            ellipse fit to the connected component.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ConnectedComponent.MinorAxisLength">
            <summary>
            Gets or sets the length, in pixels, of the minor axis of the
            ellipse fit to the connected component.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ConnectedComponent.Area">
            <summary>
            Gets or sets the number of pixels in the connected component.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ConnectedComponent.Patch">
            <summary>
            Gets or sets the image subregion corresponding to the bounding
            box of the connected component. This property might be <see langword="null"/>
            if the connected component was created from a polygonal contour.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ConnectedComponent.Contour">
            <summary>
            Gets or sets the polygonal contour from which the connected component
            properties were extracted. This property might be <see langword="null"/>
            if the connected component was created from an image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ConnectedComponent.FromImage(OpenCV.Net.IplImage,System.Boolean)">
            <summary>
            Returns a <see cref="T:Bonsai.Vision.ConnectedComponent"/> derived from the spatial 
            moments of the specified image.
            </summary>
            <param name="image">
            The image from which to derive the spatial moments used to initialize
            the <see cref="T:Bonsai.Vision.ConnectedComponent"/>.
            </param>
            <param name="binary">
            Specifies whether all non-zero pixels should be treated as having a
            weight of one.
            </param>
            <returns>
            A <see cref="T:Bonsai.Vision.ConnectedComponent"/> object derived from the spatial 
            moments of the image. If the area of the connected component is zero,
            the centroid and orientation angle will be set to <see cref="F:System.Single.NaN"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ConnectedComponent.FromContour(OpenCV.Net.Seq)">
            <summary>
            Returns a <see cref="T:Bonsai.Vision.ConnectedComponent"/> derived from the spatial 
            moments of the specified polygon.
            </summary>
            <param name="currentContour">
            The polygon from which to derive the spatial moments used to initialize
            the <see cref="T:Bonsai.Vision.ConnectedComponent"/>.
            </param>
            <returns>
            A <see cref="T:Bonsai.Vision.ConnectedComponent"/> object derived from the spatial 
            moments of the polygon. If the area of the connected component is zero,
            the centroid and orientation angle will be set to <see cref="F:System.Single.NaN"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ConnectedComponent.FromMoments(OpenCV.Net.Moments)">
            <summary>
            Returns a <see cref="T:Bonsai.Vision.ConnectedComponent"/> derived from the spatial 
            moments of a polygon or rasterized shape.
            </summary>
            <param name="moments">
            The spatial moments up to third order of a polygon or rasterized shape.
            </param>
            <returns>
            A <see cref="T:Bonsai.Vision.ConnectedComponent"/> object derived from the specified 
            spatial moments. If the area of the connected component is zero,
            the centroid and orientation angle will be set to <see cref="F:System.Single.NaN"/>.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.ConnectedComponentCollection">
            <summary>
            Represents a collection of connected components.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ConnectedComponentCollection.#ctor(OpenCV.Net.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/>
            class using the specified image size.
            </summary>
            <param name="imageSize">
            The size of the image from which the connected components were extracted.
            </param>
        </member>
        <member name="M:Bonsai.Vision.ConnectedComponentCollection.#ctor(System.Collections.Generic.IList{Bonsai.Vision.ConnectedComponent},OpenCV.Net.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/>
            class as a wrapper for the specified list of connected components.
            </summary>
            <param name="components">
            The list of connected components that is wrapped by the new collection.
            </param>
            <param name="imageSize">
            The size of the image from which the connected components were extracted.
            </param>
        </member>
        <member name="P:Bonsai.Vision.ConnectedComponentCollection.ImageSize">
            <summary>
            Gets the pixel-accurate size of the image from which the connected
            components were extracted.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.ContainsPoint">
            <summary>
            Represents an operator that determines whether each point in the sequence is
            contained inside a rectangle, contour, or other polygonal shape.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Rect,OpenCV.Net.Point}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside a rectangle.
            </summary>
            <param name="source">
            A sequence of pairs containing a rectangle and a point with integer
            coordinates to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the rectangle.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Rect,OpenCV.Net.Point2f}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside a rectangle.
            </summary>
            <param name="source">
            A sequence of pairs containing a rectangle and a point with single-precision
            floating-point coordinates to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the rectangle.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Contour,OpenCV.Net.Point}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside a polygonal contour.
            </summary>
            <param name="source">
            A sequence of pairs containing a <see cref="T:OpenCV.Net.Contour"/> object and a
            point with integer coordinates to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Contour,OpenCV.Net.Point2f}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside a polygonal contour.
            </summary>
            <param name="source">
            A sequence of pairs containing a <see cref="T:OpenCV.Net.Contour"/> object and a
            point with single-precision floating-point coordinates to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{Bonsai.Vision.ConnectedComponent,OpenCV.Net.Point}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside the polygonal contour of a connected component.
            </summary>
            <param name="source">
            A sequence of pairs containing a <see cref="T:Bonsai.Vision.ConnectedComponent"/> object
            and a point with integer coordinates to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour of a connected component.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{Bonsai.Vision.ConnectedComponent,OpenCV.Net.Point2f}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside the polygonal contour of a connected component.
            </summary>
            <param name="source">
            A sequence of pairs containing a <see cref="T:Bonsai.Vision.ConnectedComponent"/> object
            and a point with single-precision floating-point coordinates to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour of a connected component.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point[],OpenCV.Net.Point}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside the polygonal contour specified by an array of vertices.
            </summary>
            <param name="source">
            A sequence of pairs containing a <see cref="T:OpenCV.Net.Point"/> array specifying the
            contour and a point with integer coordinates to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour specified by an array of vertices.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point[],OpenCV.Net.Point2f}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside the polygonal contour specified by an array of vertices.
            </summary>
            <param name="source">
            A sequence of pairs containing a <see cref="T:OpenCV.Net.Point"/> array specifying the
            contour and a point with single-precision floating-point coordinates to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour specified by an array of vertices.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point[][],OpenCV.Net.Point}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside any of the polygonal contours specified by arrays of vertices.
            </summary>
            <param name="source">
            A sequence of pairs containing a jagged array of <see cref="T:OpenCV.Net.Point"/> values
            specifying the contours and a point with integer coordinates to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside any of the polygonal contours specified by arrays of
            vertices.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point[][],OpenCV.Net.Point2f}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside any of the polygonal contours specified by arrays of vertices.
            </summary>
            <param name="source">
            A sequence of pairs containing a jagged array of <see cref="T:OpenCV.Net.Point"/> values
            specifying the contours and a point with single-precision floating-point
            coordinates to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside any of the polygonal contours specified by arrays of
            vertices.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point,OpenCV.Net.Rect}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside a rectangle.
            </summary>
            <param name="source">
            A sequence of pairs containing a point with integer coordinates and
            a rectangle to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the rectangle.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point2f,OpenCV.Net.Rect}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside a rectangle.
            </summary>
            <param name="source">
            A sequence of pairs containing a point with single-precision
            floating-point coordinates and a rectangle to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the rectangle.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point,OpenCV.Net.Contour}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside a polygonal contour.
            </summary>
            <param name="source">
            A sequence of pairs containing a point with integer coordinates and
            a <see cref="T:OpenCV.Net.Contour"/> object to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point2f,OpenCV.Net.Contour}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside a polygonal contour.
            </summary>
            <param name="source">
            A sequence of pairs containing a point with single-precision
            floating-point coordinates and a <see cref="T:OpenCV.Net.Contour"/> object to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point,Bonsai.Vision.ConnectedComponent}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside the polygonal contour of a connected component.
            </summary>
            <param name="source">
            A sequence of pairs containing a point with integer coordinates and
            a <see cref="T:Bonsai.Vision.ConnectedComponent"/> object to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour of a connected component.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point2f,Bonsai.Vision.ConnectedComponent}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside the polygonal contour of a connected component.
            </summary>
            <param name="source">
            A sequence of pairs containing a point with single-precision
            floating-point coordinates and a <see cref="T:Bonsai.Vision.ConnectedComponent"/> object
            to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour of a connected component.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point,OpenCV.Net.Point[]}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside the polygonal contour specified by an array of vertices.
            </summary>
            <param name="source">
            A sequence of pairs containing a point with integer coordinates and
            a <see cref="T:OpenCV.Net.Point"/> array specifying the contour to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour specified by an array of vertices.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point2f,OpenCV.Net.Point[]}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside the polygonal contour specified by an array of vertices.
            </summary>
            <param name="source">
            A sequence of pairs containing a point with single-precision
            floating-point coordinates and a <see cref="T:OpenCV.Net.Point"/> array specifying
            the contour to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside the polygonal contour specified by an array of vertices.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point,OpenCV.Net.Point[][]}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside any of the polygonal contours specified by arrays of vertices.
            </summary>
            <param name="source">
            A sequence of pairs containing a point with integer coordinates and a
            jagged array of <see cref="T:OpenCV.Net.Point"/> values specifying the contours to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside any of the polygonal contours specified by arrays of
            vertices.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContainsPoint.Process(System.IObservable{System.Tuple{OpenCV.Net.Point2f,OpenCV.Net.Point[][]}})">
            <summary>
            Determines whether each point in an observable sequence is contained
            inside any of the polygonal contours specified by arrays of vertices.
            </summary>
            <param name="source">
            A sequence of pairs containing a point with single-precision floating-point
            coordinates and a jagged array of <see cref="T:OpenCV.Net.Point"/> values specifying the
            contours to test.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the point
            is contained inside any of the polygonal contours specified by arrays of
            vertices.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.ContourConvexity">
            <summary>
            Provides the result of a convexity analysis of a polygonal contour,
            representing the deviations between each point in the contour and its
            convex hull.
            </summary>
            <seealso cref="T:Bonsai.Vision.ConvexityDefects"/>
        </member>
        <member name="M:Bonsai.Vision.ContourConvexity.#ctor(OpenCV.Net.Contour,OpenCV.Net.Seq,OpenCV.Net.Seq)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.ContourConvexity"/> class
            using the specified contour, convex hull and corresponding convexity defects.
            </summary>
            <param name="contour">
            The polygonal contour from which the convex hull and convexity defects
            were calculated.
            </param>
            <param name="convexHull">
            A sequence containing the points in the convex hull of the polygonal contour.
            </param>
            <param name="convexityDefects">
            A sequence of <see cref="T:OpenCV.Net.ConvexityDefect"/> structures representing the
            deviations between each point in the polygonal contour and its convex hull.
            </param>
        </member>
        <member name="P:Bonsai.Vision.ContourConvexity.Contour">
            <summary>
            Gets the polygonal contour from which the convex hull and convexity defects
            were calculated.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ContourConvexity.ConvexHull">
            <summary>
            Gets a sequence containing the points in the convex hull of the polygonal contour.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ContourConvexity.ConvexityDefects">
            <summary>
            Gets a sequence of <see cref="T:OpenCV.Net.ConvexityDefect"/> structures representing the
            deviations between each point in the polygonal contour and its convex hull.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.ContourPoints">
            <summary>
            Represents an operator that copies all points of each contour in the
            sequence to a new array.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ContourPoints.Process(System.IObservable{OpenCV.Net.Contour})">
            <summary>
            Copies all points of each contour in an observable sequence to a new array.
            </summary>
            <param name="source">
            The sequence of contours from which to extract the points.
            </param>
            <returns>
            A sequence of arrays containing all points of each contour in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContourPoints.Process(System.IObservable{OpenCV.Net.Seq})">
            <summary>
            Copies all points of each contour in an observable sequence to a new array.
            </summary>
            <param name="source">
            The sequence of <see cref="T:OpenCV.Net.Seq"/> objects from which to extract the points.
            </param>
            <returns>
            A sequence of arrays containing all points of each contour in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ContourPoints.Process(System.IObservable{Bonsai.Vision.ConnectedComponent})">
            <summary>
            Copies all points of each contour in an observable sequence to a new array.
            </summary>
            <param name="source">
            The sequence of <see cref="T:Bonsai.Vision.ConnectedComponent"/> objects from which to
            extract the points.
            </param>
            <returns>
            A sequence of arrays containing all points of each contour in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Contours">
            <summary>
            Provides a reference to a hierarchy of polygonal contours extracted
            from an image bitmap.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Contours.#ctor(OpenCV.Net.Seq,OpenCV.Net.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.Contours"/> class
            using the specified root node and image size.
            </summary>
            <param name="firstContour">
            The first node in the hierarchy of extracted polygonal contours.
            </param>
            <param name="imageSize">
            The pixel-accurate size of the image from which the contours
            were extracted.
            </param>
        </member>
        <member name="P:Bonsai.Vision.Contours.FirstContour">
            <summary>
            Gets the reference to the first polygonal contour in the hierarchy.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Contours.ImageSize">
            <summary>
            Gets the pixel-accurate size of the image from which the polygonal
            contours were extracted.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.ConvertColor">
            <summary>
            Represents an operator that converts pixels from one color space to another
            for all images in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ConvertColor.Conversion">
            <summary>
            Gets or sets the color conversion to apply to individual image pixels.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ConvertColor.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Converts pixels from one color space to another for all images in an
            observable sequence.
            </summary>
            <param name="source">
            The sequence of images in the original color space.
            </param>
            <returns>
            A sequence of images where every pixel is specified in the new color space.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.ConvertToImage">
            <summary>
            Represents an operator that converts each array-like object in the sequence
            into an image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ConvertToImage.Process``1(System.IObservable{``0})">
            <summary>
            Converts each array-like object in an observable sequence into an image.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of array-like objects to be converted.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the
            image header for the arbitrary array.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.ConvexityDefects">
            <summary>
            Represents an operator that finds the convexity defects of each contour
            in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ConvexityDefects.Process(System.IObservable{OpenCV.Net.Seq})">
            <summary>
            Finds the convexity defects of each contour in an observable sequence.
            </summary>
            <param name="source">
            The sequence of contours for which to find the convexity defects.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.ContourConvexity"/> objects representing the
            deviations between each point in the contour and its convex hull.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ConvexityDefects.Process(System.IObservable{Bonsai.Vision.ConnectedComponent})">
            <summary>
            Finds the convexity defects of each <see cref="T:Bonsai.Vision.ConnectedComponent"/>
            in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:Bonsai.Vision.ConnectedComponent"/> objects containing the
            contours for which to find the convexity defects.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.ContourConvexity"/> objects representing the
            deviations between each point in the contour and its convex hull.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CreateExtrinsics">
            <summary>
            Represents an operator that creates a set of parameters specifying
            the camera extrinsics.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreateExtrinsics.Rotation">
            <summary>
            Gets or sets the rotation vector transforming object-space coordinates into
            camera-space coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreateExtrinsics.Translation">
            <summary>
            Gets or sets the translation vector transforming object-space coordinates into
            camera-space coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CreateExtrinsics.Generate">
            <summary>
            Generates an observable sequence that contains the camera extrinsics
            using the specified rotation and translation vectors.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:Bonsai.Vision.Extrinsics"/> structure.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CreateExtrinsics.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of camera extrinsics objects using the
            specified rotation and translation vectors, and where each <see cref="T:Bonsai.Vision.Extrinsics"/>
            object is emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new camera extrinsics.
            </param>
            <returns>
            The sequence of created <see cref="T:Bonsai.Vision.Extrinsics"/> objects.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CreateIntrinsics">
            <summary>
            Represents an operator that creates a set of parameters specifying
            the camera intrinsics.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreateIntrinsics.ImageSize">
            <summary>
            Gets or sets the image size, in pixels, for the camera intrinsics.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreateIntrinsics.FocalLength">
            <summary>
            Gets or sets the focal length of the camera, in units of pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreateIntrinsics.PrincipalPoint">
            <summary>
            Gets or sets the principal point of the camera, in pixels, usually at the image center.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreateIntrinsics.RadialDistortion">
            <summary>
            Gets or sets the radial distortion coefficients.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreateIntrinsics.TangentialDistortion">
            <summary>
            Gets or sets the tangential distortion coefficients.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CreateIntrinsics.Generate">
            <summary>
            Generates an observable sequence that contains the camera intrinsics
            using the specified focal length and distortion parameters.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:Bonsai.Vision.Intrinsics"/> structure.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CreateIntrinsics.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of camera intrinsics using the specified
            focal length and distortion parameters, and where each <see cref="T:Bonsai.Vision.Intrinsics"/>
            object is emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new camera intrinsics.
            </param>
            <returns>
            The sequence of created <see cref="T:Bonsai.Vision.Intrinsics"/> objects.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CreatePoint">
            <summary>
            Represents an operator that creates a 2D point with integer coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreatePoint.X">
            <summary>
            Gets or sets the x-coordinate of the point.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreatePoint.Y">
            <summary>
            Gets or sets the y-coordinate of the point.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CreatePoint.Generate">
            <summary>
            Generates an observable sequence that contains a single 2D point
            with integer coordinates.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenCV.Net.Point"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CreatePoint.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 2D points using the specified
            integer coordinates, and where each <see cref="T:OpenCV.Net.Point"/> object
            is emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new 2D points.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenCV.Net.Point"/> objects.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CreatePoint2d">
            <summary>
            Represents an operator that creates a 2D point with double-precision
            floating-point coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreatePoint2d.X">
            <summary>
            Gets or sets the x-coordinate of the point.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreatePoint2d.Y">
            <summary>
            Gets or sets the y-coordinate of the point.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CreatePoint2d.Generate">
            <summary>
            Generates an observable sequence that contains a single 2D point
            with double-precision floating-point coordinates.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenCV.Net.Point2d"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CreatePoint2d.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 2D points using the specified
            double-precision floating-point coordinates, and where each
            <see cref="T:OpenCV.Net.Point2d"/> object is emitted only when an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new 2D points.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenCV.Net.Point2d"/> objects.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CreatePoint2f">
            <summary>
            Represents an operator that creates a 2D point with single-precision
            floating-point coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreatePoint2f.X">
            <summary>
            Gets or sets the x-coordinate of the point.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreatePoint2f.Y">
            <summary>
            Gets or sets the y-coordinate of the point.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CreatePoint2f.Generate">
            <summary>
            Generates an observable sequence that contains a single 2D point
            with single-precision floating-point coordinates.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenCV.Net.Point2f"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CreatePoint2f.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 2D points using the specified
            single-precision floating-point coordinates, and where each
            <see cref="T:OpenCV.Net.Point2f"/> object is emitted only when an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new 2D points.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenCV.Net.Point2f"/> objects.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CreatePoint3d">
            <summary>
            Represents an operator that creates a 3D point with double-precision
            floating-point coordinates.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreatePoint3d.X">
            <summary>
            Gets or sets the x-coordinate of the point.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreatePoint3d.Y">
            <summary>
            Gets or sets the y-coordinate of the point.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CreatePoint3d.Z">
            <summary>
            Gets or sets the z-coordinate of the point.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CreatePoint3d.Generate">
            <summary>
            Generates an observable sequence that contains a single 3D point
            with double-precision floating-point coordinates.
            </summary>
            <returns>
            A sequence containing the created <see cref="T:OpenCV.Net.Point3d"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CreatePoint3d.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of 3D points using the specified
            double-precision floating-point coordinates, and where each
            <see cref="T:OpenCV.Net.Point3d"/> object is emitted only when an observable
            sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new 3D points.
            </param>
            <returns>
            The sequence of created <see cref="T:OpenCV.Net.Point3d"/> objects.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Crop">
            <summary>
            Represents an operator that crops a rectangular subregion of each image
            in the sequence, without copying.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Crop.RegionOfInterest">
            <summary>
            Gets or sets a rectangle specifying the region of interest inside the image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Crop.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Crops a subregion of each image in an observable sequence.
            </summary>
            <param name="source">The sequence of images to crop.</param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects where each new image
            contains the extracted subregion of the original image.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CropCenter">
            <summary>
            Represents an operator that crops rectangular regions with fixed size around
            the specified center for each image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CropCenter.Size">
            <summary>
            Gets or sets a value specifying the size of the region of interest to
            crop from the image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CropCenter.FillValue">
            <summary>
            Gets or sets a <see cref="T:OpenCV.Net.Scalar"/> specifying the value to which all
            pixels that fall outside image boundaries will be set to.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CropCenter.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Crops a rectangular region with fixed size around the center of each image
            in an observable sequence.
            </summary>
            <param name="source">The sequence of images to crop.</param>
            <returns>
            A sequence of images representing the cropped rectangular regions.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CropCenter.Process(System.IObservable{System.Tuple{OpenCV.Net.IplImage,OpenCV.Net.Point}})">
            <summary>
            Crops a rectangular region with fixed size around the specified center for
            each image in an observable sequence.
            </summary>
            <param name="source">
            A sequence of pairs representing the image and a 2D position with integer
            coordinates around which to crop the rectangular region.
            </param>
            <returns>
            A sequence of images representing the rectangular region cropped around
            each of the specified positions.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CropCenter.Process(System.IObservable{System.Tuple{OpenCV.Net.IplImage,OpenCV.Net.Point2f}})">
            <summary>
            Crops a rectangular region with fixed size around the specified center for
            each image in an observable sequence.
            </summary>
            <param name="source">
            A sequence of pairs representing the image and a 2D position with single-precision
            floating-point coordinates around which to crop the rectangular region.
            </param>
            <returns>
            A sequence of images representing the rectangular region cropped around
            each of the specified positions.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CropCenter.Process(System.IObservable{System.Tuple{OpenCV.Net.IplImage,Bonsai.Vision.ConnectedComponent}})">
            <summary>
            Crops a rectangular region with fixed size around the center of the specified
            connected component for each image in an observable sequence.
            </summary>
            <param name="source">
            A sequence of pairs representing the image and the <see cref="T:Bonsai.Vision.ConnectedComponent"/>
            around which to crop the rectangular region.
            </param>
            <returns>
            A sequence of images representing the rectangular region cropped around
            the centroid of the specified connected component.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.CropCenter.Process(System.IObservable{System.Tuple{OpenCV.Net.IplImage,Bonsai.Vision.ConnectedComponentCollection}})">
            <summary>
            Crops a collection of rectangular regions with fixed size around the center of
            each connected component for each image in an observable sequence.
            </summary>
            <param name="source">
            A sequence of pairs representing the image and the <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/>
            specifying the centroids used to crop the rectangular regions.
            </param>
            <returns>
            A sequence of image arrays representing the rectangular regions cropped around
            each of the connected components.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CropPolygon">
            <summary>
            Represents an operator that crops a polygonal region of interest for each
            image in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CropPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.CropPolygon"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CropPolygon.Regions">
            <summary>
            Gets or sets the array of vertices specifying each polygonal region of interest.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CropPolygon.MaskType">
            <summary>
            Gets or sets a value specifying the type of mask operation to apply
            on the region of interest.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.CropPolygon.FillValue">
            <summary>
            Gets or sets a <see cref="T:OpenCV.Net.Scalar"/> specifying the value to which all
            pixels that are not in the selected region will be set to.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.CropPolygon.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Extracts a polygonal region of interest for each image in an observable
            sequence.
            </summary>
            <param name="source">
            The sequence of images for which to extract the polygonal region of
            interest.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects where each new image
            contains the extracted subregion of the original image.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.DecodeImage">
            <summary>
            Represents an operator that decodes an image from each byte buffer in
            the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.DecodeImage.Mode">
            <summary>
            Gets or sets a value specifying optional conversions applied to the
            decoded image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.DecodeImage.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Decodes an image from each byte buffer in an observable sequence.
            </summary>
            <param name="source">
            The sequence of array-like objects storing the memory buffers
            to be decoded.
            </param>
            <returns>
            The sequence of decoded images.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.DecodeImage.Process(System.IObservable{System.Byte[]})">
            <summary>
            Decodes an image from each byte array in an observable sequence.
            </summary>
            <param name="source">
            The sequence of array objects storing the image data to be decoded.
            </param>
            <returns>
            The sequence of decoded images.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.DistanceTransform">
            <summary>
            Represents an operator that calculates the distance to the closest zero pixel
            for all non-zero pixels of each image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.DistanceTransform.DistanceType">
            <summary>
            Gets or sets a value specifying the type of distance function to use.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.DistanceTransform.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Calculates the distance to the closest zero pixel for all non-zero pixels
            of each image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images for which to compute the distance transform.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects where each pixel contains
            the calculated distance from the original image element to the closest
            zero pixel.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.DrawConnectedComponents">
            <summary>
            Represents an operator that renders each set of connected components
            in the sequence as an image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.DrawConnectedComponents.Process(System.IObservable{Bonsai.Vision.ConnectedComponentCollection})">
            <summary>
            Renders each set of connected components in an observable sequence
            as a new image.
            </summary>
            <param name="source">
            The sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects to draw.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the result of
            rendering each set of connected components as an image.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.DrawContours">
            <summary>
            Represents an operator that renders each set of contours in the sequence
            as an image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.DrawContours.MaxLevel">
            <summary>
            Gets or sets the maximum level of the contour hierarchy to draw.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.DrawContours.Thickness">
            <summary>
            Gets or sets the thickness of the lines with which the contours are drawn.
            If negative, the contour interiors are drawn.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Bonsai.Vision.DrawContours.Process(System.IObservable{Bonsai.Vision.Contours})">
            <summary>
            Renders each set of contours in an observable sequence as a new image.
            </summary>
            <param name="source">
            The sequence of <see cref="T:Bonsai.Vision.Contours"/> objects to draw.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the result of
            rendering each set of contours as an image.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.DrawContours.Process(System.IObservable{OpenCV.Net.Contour})">
            <summary>
            Renders each contour in an observable sequence as a new image.
            </summary>
            <param name="source">The sequence of contour objects to draw.</param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the result of
            rendering each contour as an image.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Drawing.AddImage">
            <summary>
            Represents an operator that specifies drawing the specified image to the canvas.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddImage.Image">
            <summary>
            Gets or sets the image to draw.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddImage.Destination">
            <summary>
            Gets or sets the optional region in which to draw the image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddImage.Interpolation">
            <summary>
            Gets or sets the interpolation method used to resize the input image, if required.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.AddImage.GetRenderer">
            <summary>
            Returns the image drawing operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.AddText">
            <summary>
            Represents an operator that specifies rendering text strokes with the
            specified font and color at a given location.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddText.Origin">
            <summary>
            Gets or sets the coordinates of the upper-left corner of the drawn text.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.AddText.GetRenderer">
            <summary>
            Returns the text rendering operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.AddTextBase">
            <summary>
            Provides an abstract base class for operators that specify drawing text strokes
            with a specified font and color.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddTextBase.Text">
            <summary>
            Gets or sets the text to draw.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddTextBase.Font">
            <summary>
            Gets or sets the font style used to render the text strokes.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddTextBase.Alignment">
            <summary>
            Gets or sets the horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddTextBase.LineAlignment">
            <summary>
            Gets or sets the vertical alignment of the text.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddTextBase.TextRenderingHint">
            <summary>
            Gets or sets the rendering mode used for the text strokes.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddTextBase.Color">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddTextBase.FontXml">
            <summary>
            Gets or sets an XML representation of the font for serialization.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.Drawing.AddTextBox">
            <summary>
            Represents an operator that specifies rendering text strokes with the
            specified font and color inside the specified layout rectangle.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.AddTextBox.Destination">
            <summary>
            Gets or sets the optional region in which to draw the text.
            By default the box will fill the entire image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.AddTextBox.GetRenderer">
            <summary>
            Returns the text rendering operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.Canvas">
            <summary>
            Provides support for lazy initialization and rendering of dynamic bitmaps.
            </summary>
            <remarks>
            Each canvas stores a generator function, used to allocate the bitmap memory,
            and an immutable sequence of drawing operations to be applied to the bitmap
            in order to produce the final image.
            </remarks>
        </member>
        <member name="M:Bonsai.Vision.Drawing.Canvas.Draw">
            <summary>
            Allocates the bitmap memory and applies the sequence of operations
            to create a new drawing.
            </summary>
            <returns>
            An <see cref="T:OpenCV.Net.IplImage"/> object representing the result of the
            cumulative application of all the drawing operations to the canvas
            bitmap.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Drawing.Canvas.op_Addition(Bonsai.Vision.Drawing.Canvas,Bonsai.Vision.Drawing.Canvas)">
            <summary>
            Concatenates the drawing operations of two specified canvas.
            </summary>
            <param name="left">The first canvas to concatenate.</param>
            <param name="right">The second canvas to concatenate.</param>
            <returns>
            A new <see cref="T:Bonsai.Vision.Drawing.Canvas"/> object representing the application
            of the operations of the <paramref name="left"/> canvas,
            followed by the operations of the <paramref name="right"/> canvas.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Drawing.Canvas.Merge(Bonsai.Vision.Drawing.Canvas,Bonsai.Vision.Drawing.Canvas)">
            <summary>
            Combines the drawing operations of two specified canvas.
            </summary>
            <param name="source">The first canvas object to merge.</param>
            <param name="other">
            The second canvas object to merge. The bitmap allocators for both
            canvas objects must be identical for drawing operations to be
            composable.
            </param>
            <returns>
            A new <see cref="T:Bonsai.Vision.Drawing.Canvas"/> object representing the application
            of the operations of the <paramref name="source"/> canvas,
            followed by the operations of the <paramref name="other"/> canvas.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> or <paramref name="other"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The bitmap allocator of the <paramref name="other"/> canvas is not
            the same as the allocator for the <paramref name="source"/> canvas.
            </exception>
        </member>
        <member name="T:Bonsai.Vision.Drawing.CanvasElement">
            <summary>
            Provides an abstract base class for operators that specify a new drawing
            operation to be applied to every canvas in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.CanvasElement.GetRenderer">
            <summary>
            When overridden in a derived class, returns the drawing operation
            to be applied to the canvas bitmap during rendering.
            </summary>
            <returns>
            The <see cref="T:System.Action`1"/> object that will be invoked to apply
            the drawing operation to the canvas bitmap during rendering.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Drawing.CanvasElement.Process(System.IObservable{Bonsai.Vision.Drawing.Canvas})">
            <summary>
            Specifies a new drawing operation to be applied to every
            canvas in an observable sequence.
            </summary>
            <param name="source">
            A sequence of canvas objects.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Drawing.Canvas"/> objects, where each instance
            represents the result of layering the new drawing operation
            on top of all the operations in the canvas.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Drawing.Circle">
            <summary>
            Represents an operator that specifies drawing a circle with the specified
            center and radius.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Circle.Center">
            <summary>
            Gets or sets the center of the circle.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Circle.Radius">
            <summary>
            Gets or sets the radius of the circle.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Circle.Color">
            <summary>
            Gets or sets the color of the circle.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Circle.Thickness">
            <summary>
            Gets or sets the thickness of the circle boundary, if positive.
            Otherwise, indicates that the circle should be filled.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Circle.LineType">
            <summary>
            Gets or sets a value specifying the line drawing algorithm used to
            draw the circle boundary.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Circle.Shift">
            <summary>
            Gets or sets the number of fractional bits in the center coordinates and radius value.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.Circle.GetRenderer">
            <summary>
            Returns the circle drawing operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.CreateCanvas">
            <summary>
            Represents an operator that creates an empty canvas using the specified
            size and pixel format.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.CreateCanvas.Size">
            <summary>
            Gets or sets the size of the canvas.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.CreateCanvas.Depth">
            <summary>
            Gets or sets the bit depth of individual pixels in the canvas.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.CreateCanvas.Channels">
            <summary>
            Gets or sets the number of channels in the canvas.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.CreateCanvas.Color">
            <summary>
            Gets or sets the background color used to initialize all pixels in the canvas.
            If not specified, the bitmap memory will be allocated when rendering the canvas,
            but will not be initialized.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.CreateCanvas.Generate">
            <summary>
            Generates an observable sequence that contains a single empty canvas
            with the specified size and pixel format.
            </summary>
            <returns>
            A sequence containing a single instance of the <see cref="T:Bonsai.Vision.Drawing.Canvas"/>
            class representing an empty canvas with no drawing operators.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Drawing.CreateCanvas.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of canvas objects using the
            specified size and pixel format, and where each canvas is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new canvas
            objects.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Drawing.Canvas"/> objects where each element
            represents an empty canvas with no drawing operators.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Drawing.CreateFont">
            <summary>
            Represents an operator that creates a font which can be passed to
            text rendering functions.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.CreateFont.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.Drawing.CreateFont"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.CreateFont.Font">
            <summary>
            Gets or sets the font style used to render the text strokes.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.CreateFont.FontXml">
            <summary>
            Gets or sets an XML representation of the font for serialization.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.CreateFont.Generate">
            <summary>
            Generates an observable sequence that contains an object representing
            a particular format for text, including font face and size.
            </summary>
            <returns>
            A sequence containing a single instance of the <see cref="T:System.Drawing.Font"/>
            class representing a particular format for text.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Drawing.CreateFont.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of font objects representing a particular
            format for text, including font face and size, and where each font is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new font
            objects.
            </param>
            <returns>
            A sequence of <see cref="T:System.Drawing.Font"/> objects where each element
            represents a particular format for text.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Drawing.CropCanvas">
            <summary>
            Represents an operator that crops the active drawing subregion of each
            canvas in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.CropCanvas.RegionOfInterest">
            <summary>
            Gets or sets a rectangle specifying the region of interest inside the canvas.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.CropCanvas.Process(System.IObservable{Bonsai.Vision.Drawing.Canvas})">
            <summary>
            Crops the active drawing subregion of each canvas in an observable
            sequence.
            </summary>
            <param name="source">A sequence of canvas objects.</param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Drawing.Canvas"/> objects where each new canvas
            will use the specified subregion of the original image for all its
            drawing operations.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Drawing.DrawCanvas">
            <summary>
            Represents an operator that renders the sequence of operations in each canvas
            of the sequence to create a new image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.DrawCanvas.Process(System.IObservable{Bonsai.Vision.Drawing.Canvas})">
            <summary>
            Renders the sequence of operations in each canvas of an observable sequence
            to create a new image.
            </summary>
            <param name="source">A sequence of canvas objects.</param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the result of
            the cumulative application of all the drawing operations.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Drawing.DrawContours">
            <summary>
            Represents an operator that specifies drawing contour outlines or filled
            interiors in an image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.DrawContours.Contour">
            <summary>
            Gets or sets the first contour to draw.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.DrawContours.ExternalColor">
            <summary>
            Gets or sets the color of the external contours.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.DrawContours.HoleColor">
            <summary>
            Gets or sets the color of the internal holes.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.DrawContours.MaxLevel">
            <summary>
            Gets or sets the maximum level of the contour hierarchy to draw.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.DrawContours.Thickness">
            <summary>
            Gets or sets the thickness of the contour lines, if positive.
            Otherwise, the contour interiors will be drawn.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.DrawContours.LineType">
            <summary>
            Gets or sets a value specifying the line drawing algorithm used to
            draw the contour boundaries.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.DrawContours.GetRenderer">
            <summary>
            Returns the contour drawing operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.Ellipse">
            <summary>
            Represents an operator that specifies drawing an ellipse outline, filled ellipse,
            elliptic arc, or filled elliptic sector.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Ellipse.Center">
            <summary>
            Gets or sets the center of the ellipse.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Ellipse.Axes">
            <summary>
            Gets or sets the length of the ellipse axes.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Ellipse.Angle">
            <summary>
            Gets or sets the rotation angle of the ellipse, in degrees.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Ellipse.StartAngle">
            <summary>
            Gets or sets the starting angle of the elliptic arc, in degrees.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Ellipse.EndAngle">
            <summary>
            Gets or sets the ending angle of the elliptic arc, in degrees.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Ellipse.Color">
            <summary>
            Gets or sets the color of the ellipse.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Ellipse.Thickness">
            <summary>
            Gets or sets the thickness of the ellipse boundary, if positive.
            Otherwise, indicates that the ellipse should be filled.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Ellipse.LineType">
            <summary>
            Gets or sets a value specifying the line drawing algorithm used to
            draw the ellipse boundary.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Ellipse.Shift">
            <summary>
            Gets or sets the number of fractional bits in the center coordinates and axes' values.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.Ellipse.GetRenderer">
            <summary>
            Returns the ellipse drawing operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.FillPolygon">
            <summary>
            Represents an operator that specifies filling an area bounded by several
            polygonal contours.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.FillPolygon.Points">
            <summary>
            Gets or sets the array of vertices specifying each polygon boundary.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.FillPolygon.Color">
            <summary>
            Gets or sets the color of the filled area.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.FillPolygon.LineType">
            <summary>
            Gets or sets a value specifying the line drawing algorithm used to
            draw the polygon boundaries.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.FillPolygon.Shift">
            <summary>
            Gets or sets the number of fractional bits in the vertex coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.FillPolygon.GetRenderer">
            <summary>
            Returns the polygon filling operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.Line">
            <summary>
            Represents an operator that specifies drawing a line segment connecting
            two points.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Line.Start">
            <summary>
            Gets or sets the first point of the line segment.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Line.End">
            <summary>
            Gets or sets the second point of the line segment.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Line.Color">
            <summary>
            Gets or sets the color of the line.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Line.Thickness">
            <summary>
            Gets or sets the thickness of the line.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Line.LineType">
            <summary>
            Gets or sets a value specifying the line drawing algorithm used to
            draw the line.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Line.Shift">
            <summary>
            Gets or sets the number of fractional bits in the point coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.Line.GetRenderer">
            <summary>
            Returns the line drawing operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.LineChart">
            <summary>
            Represents an operator that specifies drawing a line chart by plotting
            each row of a matrix as a polyline element.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.LineChart.Data">
            <summary>
            Gets or sets the matrix specifying the data content of the line chart.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.LineChart.Min">
            <summary>
            Gets or sets the lower bound of the data range.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.LineChart.Max">
            <summary>
            Gets or sets the upper bound of the data range.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.LineChart.Destination">
            <summary>
            Gets or sets the optional region in which to draw the chart.
            By default the chart will cover the entire image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.LineChart.Color">
            <summary>
            Gets or sets the color of the chart lines.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.LineChart.Thickness">
            <summary>
            Gets or sets the thickness of the chart lines.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.LineChart.LineType">
            <summary>
            Gets or sets a value specifying the line drawing algorithm used to
            draw the chart lines.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.LineChart.GetRenderer">
            <summary>
            Returns the line chart drawing operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.Path">
            <summary>
            Represents an operator that specifies drawing a path from an array of vertices.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Path.Points">
            <summary>
            Gets or sets the array of vertices specifying the path.
            NaN values will not be connected or drawn.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Path.Color">
            <summary>
            Gets or sets the color of the polylines connecting the path.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Path.Thickness">
            <summary>
            Gets or sets the thickness of the polyline edges.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Path.LineType">
            <summary>
            Gets or sets a value specifying the line drawing algorithm used to
            draw the polylines.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Path.Shift">
            <summary>
            Gets or sets the number of fractional bits in the vertex coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.Path.GetRenderer">
            <summary>
            Returns the path drawing operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.PolyLine">
            <summary>
            Represents an operator that specifies drawing one or more polygonal curves.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.PolyLine.Points">
            <summary>
            Gets or sets the array of vertices specifying each polyline.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.PolyLine.Closed">
            <summary>
            Gets or sets a value indicating whether the polylines should be closed.
            If closed, a line is drawn between the first and last vertex of every contour.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.PolyLine.Color">
            <summary>
            Gets or sets the color of the polylines.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.PolyLine.Thickness">
            <summary>
            Gets or sets the thickness of the polyline edges.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.PolyLine.LineType">
            <summary>
            Gets or sets a value specifying the line drawing algorithm used to
            draw the polylines.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.PolyLine.Shift">
            <summary>
            Gets or sets the number of fractional bits in the vertex coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.PolyLine.GetRenderer">
            <summary>
            Returns the polyline drawing operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.Drawing.Rectangle">
            <summary>
            Represents an operator that specifies drawing a simple, thick, or filled
            rectangle with the specified origin and size.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Rectangle.Origin">
            <summary>
            Gets or sets the coordinates of the top-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Rectangle.Size">
            <summary>
            Gets or sets the size of the rectangle.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Rectangle.Color">
            <summary>
            Gets or sets the color of the rectangle.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Rectangle.Thickness">
            <summary>
            Gets or sets the thickness of the rectangle outline, if positive.
            Otherwise, indicates that the rectangle should be filled.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Rectangle.LineType">
            <summary>
            Gets or sets a value specifying the line drawing algorithm used to
            draw the rectangle outline.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Drawing.Rectangle.Shift">
            <summary>
            Gets or sets the number of fractional bits in the rectangle coordinates.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Drawing.Rectangle.GetRenderer">
            <summary>
            Returns the rectangle drawing operation.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Vision.EncodeImage">
            <summary>
            Represents an operator that encodes each image in the sequence into a byte
            buffer in memory using the specified format.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.EncodeImage.Extension">
            <summary>
            Gets or sets the file extension that defines the encoding format.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.EncodeImage.CompressionParameters">
            <summary>
            Gets the collection of optional image compression parameters.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.EncodeImage.Process``1(System.IObservable{``0})">
            <summary>
            Encodes each image in an observable sequence into a byte buffer in memory
            using the specified format.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence of array-like objects to be encoded.
            </param>
            <returns>
            The sequence of encoded memory buffers.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.EnumerateContours">
            <summary>
            Represents an operator that generates a sequence of all the contours at the
            same level of the hierarchy, for each contour in the input sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.EnumerateContours.Process(System.IObservable{OpenCV.Net.Contour})">
            <summary>
            Generates a sequence of all the contours at the same level of the hierarchy,
            for each contour in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Contour"/> objects representing the first contour
            of the hierarchy to enumerate.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Contour"/> objects representing all the polygonal
            contours at the same level of the hierarchy, including each of the contours
            in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.EnumerateContours.Process(System.IObservable{OpenCV.Net.Seq})">
            <summary>
            Generates a sequence of all the contours at the same level of the hierarchy,
            for each contour in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Seq"/> objects representing the first contour
            of the hierarchy to enumerate.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Contour"/> objects representing all the polygonal
            contours at the same level of the hierarchy, including each of the contours
            in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.EnumerateContours.Process(System.IObservable{Bonsai.Vision.Contours})">
            <summary>
            Generates a sequence of all the contours at the top level of the hierarchy,
            for each hierarchy of contours in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Vision.Contours"/> objects representing the hierarchy of
            contours to enumerate.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Contour"/> objects representing all the polygonal
            contours at the top level of the hierarchy.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.EqualizeHistogram">
            <summary>
            Represents an operator that equalizes the histogram of every grayscale
            image in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.EqualizeHistogram.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Equalizes the histogram of every grayscale image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of grayscale images for which to equalize the histogram.
            </param>
            <returns>
            A sequence of images representing the original image with an equalized
            pixel brightness histogram.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Extrinsics">
            <summary>
            Represents parameters that describe the camera extrinsic properties
            such as rotation and translation.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.Extrinsics.Rotation">
            <summary>
            The camera extrinsic rotations about the x-, y-, and z- axes of the
            reference coordinate system.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.Extrinsics.Translation">
            <summary>
            The translation of the camera from the origin of the reference
            coordinate system.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Extrinsics.Equals(Bonsai.Vision.Extrinsics)">
            <summary>
            Returns a value indicating whether this instance is equal to the
            specified <see cref="T:Bonsai.Vision.Extrinsics"/> structure.
            </summary>
            <param name="other">
            The <see cref="T:Bonsai.Vision.Extrinsics"/> object to compare with this instance.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> represents
            the same parameter values as this instance; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Extrinsics.Equals(System.Object)">
            <summary>
            Returns a value indicating whether the specified object is an <see cref="T:Bonsai.Vision.Extrinsics"/>
            structure with the same parameter values as this <see cref="T:Bonsai.Vision.Extrinsics"/> structure.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is an <see cref="T:Bonsai.Vision.Extrinsics"/>
            structure and has the same parameter values as this structure; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Extrinsics.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Bonsai.Vision.Extrinsics"/> structure.
            </summary>
            <returns>
            An integer value that specifies a hash value for this
            <see cref="T:Bonsai.Vision.Extrinsics"/> structure.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Extrinsics.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this
            <see cref="T:Bonsai.Vision.Extrinsics"/> structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing all the parameter values of this
            <see cref="T:Bonsai.Vision.Extrinsics"/> structure.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Extrinsics.op_Equality(Bonsai.Vision.Extrinsics,Bonsai.Vision.Extrinsics)">
            <summary>
            Indicates whether two <see cref="T:Bonsai.Vision.Extrinsics"/> structures are equal.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Vision.Extrinsics"/> structure on the left-hand side of the
            equality operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Vision.Extrinsics"/> structure on the right-hand side of the
            equality operator.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and <paramref name="right"/>
            have equal parameter values; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Extrinsics.op_Inequality(Bonsai.Vision.Extrinsics,Bonsai.Vision.Extrinsics)">
            <summary>
            Indicates whether two <see cref="T:Bonsai.Vision.Extrinsics"/> structures are different.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Vision.Extrinsics"/> structure on the left-hand side of the
            inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Vision.Extrinsics"/> structure on the right-hand side of the
            inequality operator.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and <paramref name="right"/>
            differ in any of their parameter values; <see langword="false"/> if
            <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.FileCapture">
            <summary>
            Represents an operator that generates a sequence of images from the
            specified movie file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FileCapture.Capture">
            <summary>
            Gets the last active video capture stream. This property is reserved
            to be used only by the file capture visualizer.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FileCapture.FileName">
            <summary>
            Gets or sets the name of the movie file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FileCapture.PlaybackRate">
            <summary>
            Gets or sets the rate at which to read images from the file. A value
            of zero means the recorded video frame rate will be used.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FileCapture.StartPosition">
            <summary>
            Gets or sets the position at which to start playback of the file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FileCapture.PositionUnits">
            <summary>
            Gets or sets a value specifying the units of the start position.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FileCapture.Loop">
            <summary>
            Gets or sets a value indicating whether the video sequence should
            loop when the end of the file is reached.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FileCapture.Playing">
            <summary>
            Gets or sets a value specifying whether the video sequence is playing.
            If the video is paused, the current frame will be repeated at the specified
            playback rate.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.FileCapture.Seek(System.Int32)">
            <summary>
            Moves the current video player to the specified frame. This method
            is reserved to be called by the file capture visualizer.
            </summary>
            <param name="frameNumber">
            The zero-based index of the frame the player should move to.
            </param>
        </member>
        <member name="M:Bonsai.Vision.FileCapture.Generate">
            <summary>
            Generates an observable sequence of images from the specified movie file.
            </summary>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing each of
            the frames in the specified movie file.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.FileCapture.Generate``1(System.IObservable{``0})">
            <summary>
            Generates a sequence of images from the specified movie file, where each
            new image is emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for reading new images from the
            movie file.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing each of
            the frames in the specified movie file.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.CapturePosition">
            <summary>
            Specifies the units of the file capture start position.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.CapturePosition.Milliseconds">
            <summary>
            A value in milliseconds representing time from the start of the video.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.CapturePosition.Frames">
            <summary>
            The zero-based index of a video frame.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.CapturePosition.AviRatio">
            <summary>
            A relative position in the file, where zero is the start of the
            video and one is the end of the video.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.Filter2D">
            <summary>
            Represents an operator that convolves each image in the sequence with
            the specified kernel.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Filter2D.Anchor">
            <summary>
            Gets or sets the anchor of the kernel that indicates the relative position of filtered points.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Filter2D.Kernel">
            <summary>
            Gets or sets a 2D array specifying the image convolution kernel.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Filter2D.KernelXml">
            <summary>
            Gets or sets an XML representation of the image convolution kernel.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Filter2D.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Convolves each image in an observable sequence with the specified kernel.
            </summary>
            <param name="source">
            The sequence of images to convolve with the specified kernel.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the result
            of filtering each image with the specified convolution kernel.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Filter2D.Process(System.IObservable{System.Tuple{OpenCV.Net.IplImage,OpenCV.Net.Mat}})">
            <summary>
            Convolves each image in an observable sequence with its paired convolution
            kernel.
            </summary>
            <param name="source">
            A sequence of pairs containing the image and the convolution kernel,
            respectively, where the kernel is specified as a <see cref="T:OpenCV.Net.Mat"/> object.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the result
            of filtering each image with the corresponding convolution kernel.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Filter2D.Process(System.IObservable{System.Tuple{OpenCV.Net.IplImage,OpenCV.Net.IplImage}})">
            <summary>
            Convolves each image in an observable sequence with its paired convolution
            kernel.
            </summary>
            <param name="source">
            A sequence of pairs containing the image and the convolution kernel,
            respectively, where the kernel is specified as an <see cref="T:OpenCV.Net.IplImage"/> object.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the result
            of filtering each image with the corresponding convolution kernel.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.FindChessboardCorners">
            <summary>
            Represents an operator that finds the positions of internal corners for
            each chessboard image in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.FindChessboardCorners.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.FindChessboardCorners"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindChessboardCorners.PatternSize">
            <summary>
            Gets or sets the number of inner corners per chessboard row and column.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindChessboardCorners.CalibrationFlags">
            <summary>
            Gets or sets a value specifying the available operation flags for
            finding chessboard corners.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.FindChessboardCorners.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Finds the positions of internal corners for each chessboard image in
            an observable sequence.
            </summary>
            <param name="source">
            The sequence of chessboard images for which to find the internal
            corner positions.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.KeyPointCollection"/> objects representing the
            positions of internal corners detected in each chessboard image.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.FindContours">
            <summary>
            Represents an operator that finds the contours of connected components
            for each binary image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindContours.Mode">
            <summary>
            Gets or sets a value specifying the contour retrieval strategy.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindContours.Method">
            <summary>
            Gets or sets a value specifying the approximation method used to
            refine the contours.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindContours.Offset">
            <summary>
            Gets or sets the optional offset to apply to individual contour points.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindContours.MinArea">
            <summary>
            Gets or sets the minimum area for individual contours to be accepted.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindContours.MaxArea">
            <summary>
            Gets or sets the maximum area for individual contours to be accepted.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.FindContours.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Finds the contours of connected components for each binary image in
            an observable sequence.
            </summary>
            <param name="source">
            The sequence of binary images for which to find the connected component
            contours.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Contours"/> objects representing the hierarchy
            of polygonal contours extracted from each binary image.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.FindCornerSubPix">
            <summary>
            Represents an operator that finds the sub-pixel accurate locations of
            each corner or radial saddle point in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindCornerSubPix.WindowSize">
            <summary>
            Gets or sets the half-length of the side of the corner search window.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindCornerSubPix.ZeroZone">
            <summary>
            Gets or sets the half-length of the side of the middle search window
            that will be ignored during refinement.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindCornerSubPix.MaxIterations">
            <summary>
            Gets or sets the maximum number of iterations.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.FindCornerSubPix.Epsilon">
            <summary>
            Gets or sets the minimum required accuracy for convergence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.FindCornerSubPix.Process(System.IObservable{Bonsai.Vision.KeyPointCollection})">
            <summary>
            Finds the sub-pixel accurate locations of each corner or radial saddle
            point in an observable sequence.
            </summary>
            <param name="source">The sequence of corner positions to refine.</param>
            <returns>The sequence of refined corner positions.</returns>
        </member>
        <member name="T:Bonsai.Vision.Flip">
            <summary>
            Represents an operator that flips each image in the sequence around the
            vertical, horizontal or both axes.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Flip.Mode">
            <summary>
            Gets or sets a value specifying how to flip the image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Flip.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Flips each image in an observable sequence around the vertical, horizontal
            or both axes.
            </summary>
            <param name="source">The sequence of images to flip.</param>
            <returns>The sequence of flipped images.</returns>
        </member>
        <member name="T:Bonsai.Vision.GoodFeaturesToTrack">
            <summary>
            Represents an operator that finds strong corner features for each image
            in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.GoodFeaturesToTrack.MaxFeatures">
            <summary>
            Gets or sets the maximum number of corners to find.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.GoodFeaturesToTrack.QualityLevel">
            <summary>
            Gets or sets the minimal accepted quality for image corners.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.GoodFeaturesToTrack.MinDistance">
            <summary>
            Gets or sets the minimum accepted distance between detected corners.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.GoodFeaturesToTrack.RegionOfInterest">
            <summary>
            Gets or sets the region of interest used to find image corners.
            If the rectangle is empty, the whole image is used.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.GoodFeaturesToTrack.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Finds strong corner features for each image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images for which to find strong corner features.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.KeyPointCollection"/> objects representing the
            set of strong corner features extracted from each image in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.GoodFeaturesToTrack.Process(System.IObservable{System.Tuple{OpenCV.Net.IplImage,OpenCV.Net.IplImage}})">
            <summary>
            Finds strong corner features for each image in an observable sequence,
            where each image is paired with a mask where zero pixels are used to indicate
            areas in the original image from which features should be rejected.
            </summary>
            <param name="source">
            A sequence of image pairs, where the first image is used to find corner
            features, and the second image specifies the operation mask, where zero pixels
            represent pixels from the original image that should be ignored.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.KeyPointCollection"/> objects representing the
            set of strong corner features extracted from each image in the
            <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Grayscale">
            <summary>
            Represents an operator that converts each BGR color image in the
            sequence to grayscale.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Grayscale.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Converts each BGR color image in an observable sequence to grayscale.
            </summary>
            <param name="source">
            A sequence of color images in the blue-green-red (BGR) color space.
            </param>
            <returns>
            A sequence of grayscale single-channel images.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.HaarCascade">
            <summary>
            Represents an operator that detects objects on each image in the sequence
            using a pre-trained cascade of boosted Haar classifiers.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HaarCascade.FileName">
            <summary>
            Gets or sets the name of the file describing a trained Haar cascade classifier.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HaarCascade.ScaleFactor">
            <summary>
            Gets or sets the factor by which the search window is scaled between
            subsequent scans.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HaarCascade.MinNeighbors">
            <summary>
            Gets or sets the minimum number (minus 1) of neighbor rectangles that make
            up an object. All groups with smaller number of rectangles are rejected.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HaarCascade.Flags">
            <summary>
            Gets or sets a value specifying the optional operation flags for the
            Haar cascade classifier.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HaarCascade.MinSize">
            <summary>
            Gets or sets the optional minimum window size. By default, it is set
            to the size specified in the cascade classifier file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HaarCascade.MaxSize">
            <summary>
            Gets or sets the optional maximum window size. By default, it is set to the total image size.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HaarCascade.Offset">
            <summary>
            Gets or sets the optional offset to apply to individual object rectangles.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.HaarCascade.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Detects objects on each image in an observable sequence using a pre-trained
            cascade of boosted Haar classifiers.
            </summary>
            <param name="source">
            The sequence of images on which to detect objects using the boosted
            Haar classifier cascade.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Rect"/> arrays representing the objects which
            were detected on each image of the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.HoughCircles">
            <summary>
            Represents an operator that finds circles on each grayscale image in the
            sequence using a Hough transform.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughCircles.AccumulatorFactor">
            <summary>
            Gets or sets the inverse ratio of the accumulator resolution to image resolution.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughCircles.MinDistance">
            <summary>
            Gets or sets the minimum distance between the centers of detected circles.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughCircles.Param1">
            <summary>
            Gets or sets the higher threshold of the canny edge detector.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughCircles.Param2">
            <summary>
            Gets or sets the accumulator threshold at the center detection stage.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughCircles.MinRadius">
            <summary>
            Gets or sets a value specifying the minimum circle radius.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughCircles.MaxRadius">
            <summary>
            Gets or sets a value specifying the maximum circle radius.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.HoughCircles.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Finds circles on each grayscale image in an observable sequence using
            a Hough transform.
            </summary>
            <param name="source">
            The sequence of images on which to find Hough circles.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Circle"/> arrays representing the circles
            extracted from each image in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.HoughLines">
            <summary>
            Represents an operator that finds lines on each binary image in the sequence
            using a probabilistic Hough transform.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughLines.Rho">
            <summary>
            Gets or sets the distance resolution, in units of pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughLines.Theta">
            <summary>
            Gets or sets the angle resolution, in radians.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughLines.Threshold">
            <summary>
            Gets or sets the accumulator threshold. A line is returned when the
            corresponding accumulator is greater than this value.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughLines.MinLineLength">
            <summary>
            Gets or sets the minimum line length.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HoughLines.MaxLineGap">
            <summary>
            Gets or sets the maximum gap between line segments lying on the same
            line in order to consider them as a single line segment.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.HoughLines.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Finds lines on each binary image in an observable sequence using a
            probabilistic Hough transform.
            </summary>
            <param name="source">
            The sequence of images on which to find Hough lines.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.LineSegment"/> arrays representing the lines
            extracted from each image in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.HsvThreshold">
            <summary>
            Represents an operator that segments each HSV image in the sequence using
            the specified color range.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HsvThreshold.Lower">
            <summary>
            Gets or sets the lower bound of the HSV color range.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.HsvThreshold.Upper">
            <summary>
            Gets or sets the upper bound of the HSV color range. If the upper value
            for Hue is smaller than its lower value, the range will wrap around zero.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.HsvThreshold.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Segments each HSV image in an observable sequence using the specified
            color range.
            </summary>
            <param name="source">
            A sequence of color images in the hue-saturation-value (HSV) color space.
            </param>
            <returns>
            A sequence of binary images where each pixel is non-zero only if the
            corresponding HSV pixel in the color image lies between the specified
            lower and upper bounds of the range.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.ImageHistogram">
            <summary>
            Represents an operator that computes the per-channel color histograms
            for each image in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ImageHistogram.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Computes the per-channel color histograms for each image in an
            observable sequence.
            </summary>
            <param name="source">
            The sequence of images for which to compute the per-channel color
            histograms.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.ScalarHistogram"/> objects representing
            the per-channel color histograms for each image.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.ImageWriter">
            <summary>
            Represents an operator that writes each image in the sequence to the
            specified stream.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ImageWriter.CreateWriter(System.IO.Stream)">
            <summary>
            Creates the <see cref="T:System.IO.BinaryWriter"/> object that will be responsible
            for writing the image data to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream on which the image data should be written.</param>
            <returns>
            The <see cref="T:System.IO.BinaryWriter"/> object that will be used to write image
            data into the stream.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.ImageWriter.Write(System.IO.BinaryWriter,OpenCV.Net.IplImage)">
            <summary>
            Writes a new image to the binary output stream.
            </summary>
            <param name="writer">
            A <see cref="T:System.IO.BinaryWriter"/> object used to write raw image data to
            the output stream.
            </param>
            <param name="input">
            The image frame containing the raw binary data to write into the output
            stream.
            </param>
        </member>
        <member name="T:Bonsai.Vision.IncrementalMean">
            <summary>
            Represents an operator that incrementally computes the mean of the images in the sequence
            and returns each intermediate result.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.IncrementalMean.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Incrementally computes the mean of the images in an observable sequence
            and returns each intermediate result.
            </summary>
            <param name="source">
            A sequence of images used to compute the incremental mean.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects, where each image stores the
            incremental mean of all previous image values in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Intrinsics">
            <summary>
            Represents parameters that describe the camera intrinsic properties
            such as the focal length or lens distortion.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.Intrinsics.ImageSize">
            <summary>
            The image size of the camera, in pixels.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.Intrinsics.FocalLength">
            <summary>
            The focal length of the camera.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.Intrinsics.PrincipalPoint">
            <summary>
            The principal point of the camera.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.Intrinsics.RadialDistortion">
            <summary>
            The radial distortion coefficients of the camera.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.Intrinsics.TangentialDistortion">
            <summary>
            The tangential distortion coefficients of the camera.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Intrinsics.FovY">
            <summary>
            Gets the vertical field of view of the camera.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Intrinsics.FromCameraMatrix(OpenCV.Net.Mat,OpenCV.Net.Mat,System.Nullable{OpenCV.Net.Size})">
            <summary>
            Returns an <see cref="T:Bonsai.Vision.Intrinsics"/> structure representing the camera
            intrinsic parameters extracted from a camera matrix, lens distortion
            and optional image size.
            </summary>
            <param name="cameraMatrix">
            A 2x3 matrix specifying the focal lengths and principal point offset.
            </param>
            <param name="distortionCoefficients">
            A 1x5 or 5x1 vector specifying the coefficients for the lens distortion
            model.
            </param>
            <param name="imageSize">The image size of the camera, in pixels.</param>
            <returns>
            An <see cref="T:Bonsai.Vision.Intrinsics"/> object representing the extracted camera
            intrinsic parameters.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Intrinsics.FromCameraMatrix(OpenCV.Net.Mat,OpenCV.Net.Mat,System.Nullable{OpenCV.Net.Size},Bonsai.Vision.Intrinsics@)">
            <summary>
            Initializes an <see cref="T:Bonsai.Vision.Intrinsics"/> structure representing the camera
            intrinsic parameters extracted from a camera matrix, lens distortion
            and optional image size.
            </summary>
            <param name="cameraMatrix">
            A 2x3 matrix specifying the focal lengths and principal point offset.
            </param>
            <param name="distortionCoefficients">
            A 1x5 or 5x1 vector specifying the coefficients for the lens distortion
            model.
            </param>
            <param name="imageSize">The image size of the camera, in pixels.</param>
            <param name="intrinsics">
            When this method returns, contains an <see cref="T:Bonsai.Vision.Intrinsics"/> object
            representing the extracted camera intrinsic parameters.
            </param>
        </member>
        <member name="M:Bonsai.Vision.Intrinsics.Equals(Bonsai.Vision.Intrinsics)">
            <summary>
            Returns a value indicating whether this instance is equal to the
            specified <see cref="T:Bonsai.Vision.Intrinsics"/> structure.
            </summary>
            <param name="other">
            The <see cref="T:Bonsai.Vision.Intrinsics"/> object to compare with this instance.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="other"/> represents
            the same parameter values as this instance; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Intrinsics.Equals(System.Object)">
            <summary>
            Returns a value indicating whether the specified object is an <see cref="T:Bonsai.Vision.Intrinsics"/>
            structure with the same parameter values as this <see cref="T:Bonsai.Vision.Intrinsics"/> structure.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>
            <see langword="true"/> if <paramref name="obj"/> is an <see cref="T:Bonsai.Vision.Intrinsics"/>
            structure and has the same parameter values as this structure; otherwise,
            <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Intrinsics.GetHashCode">
            <summary>
            Returns a hash code for this <see cref="T:Bonsai.Vision.Intrinsics"/> structure.
            </summary>
            <returns>
            An integer value that specifies a hash value for this
            <see cref="T:Bonsai.Vision.Intrinsics"/> structure.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Intrinsics.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this
            <see cref="T:Bonsai.Vision.Intrinsics"/> structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing all the parameter values of this
            <see cref="T:Bonsai.Vision.Intrinsics"/> structure.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Intrinsics.op_Equality(Bonsai.Vision.Intrinsics,Bonsai.Vision.Intrinsics)">
            <summary>
            Indicates whether two <see cref="T:Bonsai.Vision.Intrinsics"/> structures are equal.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Vision.Intrinsics"/> structure on the left-hand side of the
            equality operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Vision.Intrinsics"/> structure on the right-hand side of the
            equality operator.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and <paramref name="right"/>
            have equal parameter values; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Intrinsics.op_Inequality(Bonsai.Vision.Intrinsics,Bonsai.Vision.Intrinsics)">
            <summary>
            Indicates whether two <see cref="T:Bonsai.Vision.Intrinsics"/> structures are different.
            </summary>
            <param name="left">
            The <see cref="T:Bonsai.Vision.Intrinsics"/> structure on the left-hand side of the
            inequality operator.
            </param>
            <param name="right">
            The <see cref="T:Bonsai.Vision.Intrinsics"/> structure on the right-hand side of the
            inequality operator.
            </param>
            <returns>
            <see langword="true"/> if <paramref name="left"/> and <paramref name="right"/>
            differ in any of their parameter values; <see langword="false"/> if
            <paramref name="left"/> and <paramref name="right"/> are equal.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.IntrinsicsTransform">
            <summary>
            Provides an abstract base class for all operators requiring a specified set of
            camera intrinsics and distortion parameters.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.IntrinsicsTransform.ImageSize">
            <summary>
            Gets or sets the image size used when computing the optimal camera matrix.
            </summary>
            <remarks>
            If the image size is specified, the optimal camera matrix is estimated
            and used to scale the camera intrinsics in such a way as to avoid losing
            pixels which would be lost when undistorting the original frames.
            </remarks>
        </member>
        <member name="P:Bonsai.Vision.IntrinsicsTransform.Alpha">
            <summary>
            Gets or sets the free scaling parameter used when computing the optimal
            camera matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.IntrinsicsTransform.FocalLength">
            <summary>
            Gets or sets the focal length of the camera, expressed in pixel units.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.IntrinsicsTransform.PrincipalPoint">
            <summary>
            Gets or sets the principal point of the camera, usually at the image center.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.IntrinsicsTransform.RadialDistortion">
            <summary>
            Gets or sets the radial distortion coefficients.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.IntrinsicsTransform.TangentialDistortion">
            <summary>
            Gets or sets the tangential distortion coefficients.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.IntrinsicsTransform.Intrinsics">
            <summary>
            Gets the full camera intrinsics matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.IntrinsicsTransform.Distortion">
            <summary>
            Gets the matrix of camera distortion coefficients.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.IplImageHelper">
            <summary>
            Provides helper functions to create and manipulate the format of cached
            image buffers.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.IplImageHelper.EnsureImageFormat(OpenCV.Net.IplImage,OpenCV.Net.Size,OpenCV.Net.IplDepth,System.Int32)">
            <summary>
            Ensures the cached image buffer is allocated and has the specified
            size and format parameters.
            </summary>
            <param name="output">
            The current cached image buffer. If the value is <see langword="null"/>,
            or if the cached image parameters do not match the specified size
            and format, a new image buffer will be allocated.
            </param>
            <param name="size">The pixel-accurate size of the image.</param>
            <param name="depth">The bit depth format for each pixel in the image.</param>
            <param name="channels">The number of channels in the image.</param>
            <returns>
            An <see cref="T:OpenCV.Net.IplImage"/> object matching the specified size and
            format parameters. If <paramref name="output"/> matches all the
            parameters, the same reference is returned without modification.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.IplImageHelper.EnsureColorCopy(OpenCV.Net.IplImage,OpenCV.Net.IplImage)">
            <summary>
            Copies the original image pixels into a cached image buffer, with optional
            color conversion in the case where the original image is grayscale.
            </summary>
            <param name="output">
            The current cached image buffer. If the value is <see langword="null"/>,
            or if the cached image parameters do not match the size of the source image,
            a new image buffer will be allocated.
            </param>
            <param name="image">
            The image storing the original pixel values.
            </param>
            <returns>
            An <see cref="T:OpenCV.Net.IplImage"/> object matching the size and bit depth of
            <paramref name="image"/> pixels, and where the number of channels is always
            three. Pixel values from <paramref name="image"/> will be either copied
            or converted from grayscale to BGR, depending on the number of channels.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.KeyPointCollection">
            <summary>
            Represents a collection of key points, or features, extracted from a single
            image frame.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.KeyPointCollection.#ctor(OpenCV.Net.IplImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.KeyPointCollection"/> class
            with the specified image.
            </summary>
            <param name="image">
            The image from which the key points in the collection were extracted.
            </param>
        </member>
        <member name="P:Bonsai.Vision.KeyPointCollection.Image">
            <summary>
            Gets the image from which the key points were extracted.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.KeyPointOpticalFlow">
            <summary>
            Represents a set of sparse correspondences between features detected in a
            reference image, and matching features detected in the current image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.KeyPointOpticalFlow.#ctor(Bonsai.Vision.KeyPointCollection,Bonsai.Vision.KeyPointCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.KeyPointOpticalFlow"/> class
            using the set of sparse feature correspondences detected in the reference
            and current images.
            </summary>
            <param name="previousKeyPoints">
            The set of features detected in the reference image.
            </param>
            <param name="currentKeyPoints">
            The set of matching features detected in the current image.
            </param>
        </member>
        <member name="P:Bonsai.Vision.KeyPointOpticalFlow.PreviousKeyPoints">
            <summary>
            Gets the set of features detected in the reference image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.KeyPointOpticalFlow.CurrentKeyPoints">
            <summary>
            Gets the set of matching features detected in the current image.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.Laplace">
            <summary>
            Represents an operator that calculates the Laplace transform of each image
            in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Laplace.ApertureSize">
            <summary>
            Gets or sets the size of the extended Sobel kernel used to compute
            derivatives.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Laplace.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Calculates the Laplace transform of each image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images for which to compute the transform.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects containing the Laplace transform
            of each image in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.LargestBinaryRegion">
            <summary>
            Represents an operator that finds the largest binary region from each
            collection of connected components in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.LargestBinaryRegion.Process(System.IObservable{Bonsai.Vision.ConnectedComponentCollection})">
            <summary>
            Finds the largest binary region from each collection of connected
            components in an observable sequence.
            </summary>
            <param name="source">A sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects.</param>
            <returns>
            A <see cref="T:Bonsai.Vision.ConnectedComponent"/> representing the largest binary region
            from each collection of connected components in the <paramref name="source"/>
            sequence, or the empty region if the collection has no elements.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.LinearPolar">
            <summary>
            Represents an operator that applies a forward or inverse linear-polar transform
            to each image in the sequence.
            </summary>
            <remarks>
            The transform emulates human foveal image processing.
            </remarks>
        </member>
        <member name="M:Bonsai.Vision.LinearPolar.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Applies a forward or inverse linear-polar transform to each image in an
            observable sequence.
            </summary>
            <param name="source">
            The sequence of images for which to apply the linear-polar transform.
            </param>
            <returns>
            The sequence of polar transformed images.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.LineSegment">
            <summary>
            Represents the two endpoints of a line segment in pixel-accurate coordinates.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.LineSegment.Start">
            <summary>
            The first endpoint of the line segment.
            </summary>
        </member>
        <member name="F:Bonsai.Vision.LineSegment.End">
            <summary>
            The second endpoint of the line segment.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.LineSegment.ToString">
            <summary>
            Creates a <see cref="T:System.String"/> representation of this
            <see cref="T:Bonsai.Vision.LineSegment"/> structure.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing all the parameter values of this
            <see cref="T:Bonsai.Vision.LineSegment"/> structure.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.LoadExtrinsics">
            <summary>
            Represents an operator that loads a set of camera extrinsics from a YML file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.LoadExtrinsics.FileName">
            <summary>
            Gets or sets the name of the camera extrinsics file.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.LoadExtrinsics.Generate">
            <summary>
            Generates an observable sequence that contains the camera extrinsics
            loaded from the specified YML file.
            </summary>
            <returns>
            A sequence containing a single <see cref="T:Bonsai.Vision.Extrinsics"/> object representing
            the camera extrinsics loaded from the specified YML file.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.LoadExtrinsics.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of camera extrinsics loaded from the
            specified YML file, and where each <see cref="T:Bonsai.Vision.Extrinsics"/> object
            is loaded only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for loading new camera
            extrinsics.
            </param>
            <returns>
            The sequence of <see cref="T:Bonsai.Vision.Extrinsics"/> objects loaded from the specified
            YML file. The most current file name is used to load the parameters after
            each notification in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.LoadImage">
            <summary>
            Represents an operator that loads an image from the specified file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.LoadImage.FileName">
            <summary>
            Gets or sets the name of the image file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.LoadImage.Mode">
            <summary>
            Gets or sets a value specifying optional conversions applied to the
            loaded image.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.LoadImage.Generate">
            <summary>
            Generates an observable sequence that contains the image loaded from the
            specified file.
            </summary>
            <returns>
            A sequence containing a single <see cref="T:OpenCV.Net.IplImage"/> object representing
            the image loaded from the specified file.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.LoadImage.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of images loaded from the specified file,
            and where each image is loaded only when an observable sequence raises a
            notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for loading new images.
            </param>
            <returns>
            The sequence of <see cref="T:OpenCV.Net.IplImage"/> objects loaded from the specified
            file. The most current file name is used to load the image after each
            notification in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.LoadIntrinsics">
            <summary>
            Represents an operator that loads a set of camera intrinsics from a YML file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.LoadIntrinsics.FileName">
            <summary>
            Gets or sets the name of the camera intrinsics file.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.LoadIntrinsics.Generate">
            <summary>
            Generates an observable sequence that contains the camera intrinsics
            loaded from the specified YML file.
            </summary>
            <returns>
            A sequence containing a single <see cref="T:Bonsai.Vision.Intrinsics"/> object representing
            the camera intrinsics loaded from the specified YML file.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.LoadIntrinsics.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of camera intrinsics loaded from the
            specified YML file, and where each <see cref="T:Bonsai.Vision.Intrinsics"/> object
            is loaded only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for loading new camera
            intrinsics.
            </param>
            <returns>
            The sequence of <see cref="T:Bonsai.Vision.Intrinsics"/> objects loaded from the specified
            YML file. The most current file name is used to load the parameters after
            each notification in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.LogPolar">
            <summary>
            Represents an operator that applies a forward or inverse log-polar transform
            to each image in the sequence.
            </summary>
            <remarks>
            The transform emulates human foveal image processing.
            </remarks>
        </member>
        <member name="M:Bonsai.Vision.LogPolar.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Applies a forward or inverse log-polar transform to each image in an
            observable sequence.
            </summary>
            <param name="source">
            The sequence of images for which to apply the log-polar transform.
            </param>
            <returns>
            The sequence of polar transformed images.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Lut">
            <summary>
            Represents an operator that performs a look-up table transformation on all
            pixels of each image in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Lut.Process``1(System.IObservable{System.Tuple{OpenCV.Net.IplImage,``0}})">
            <summary>
            Performs a look-up table transformation on all pixels of each image in an
            observable sequence, where each image is paired with a look-up table array.
            </summary>
            <typeparam name="TArray">
            The type of the array-like objects used as a look-up table.
            </typeparam>
            <param name="source">
            A sequence of pairs where the first value contains the images to be transformed,
            and the second value contains the look-up table array. The values of each image
            pixel are used as indices into the look-up table array to retrieve the result
            of the transformation.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects storing transformed image pixels.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Mask">
            <summary>
            Represents an operator that sets all pixels which are not in the operation
            mask to a fixed value, for each image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Mask.FillValue">
            <summary>
            Gets or sets the value to which all pixels that are not in the operation
            mask will be set to.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Mask.Process(System.IObservable{System.Tuple{OpenCV.Net.IplImage,OpenCV.Net.IplImage}})">
            <summary>
            Sets all pixels which are not in the operation mask to a fixed value,
            for each image in an observable sequence.
            </summary>
            <param name="source">
            A sequence of pairs where the first value contains the images to be masked,
            and the second value contains the operation mask. The zero values of the mask
            indicate which pixels in the image should be set to the specified fill value.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects where all zero pixels in the mask
            have been set to the specified fill value.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.Mask.Process(System.IObservable{System.Tuple{OpenCV.Net.IplImage,OpenCV.Net.IplImage,OpenCV.Net.IplImage}})">
            <summary>
            Sets all pixels which are not in the operation mask to the background image,
            for each foreground image in the observable sequence.
            </summary>
            <param name="source">
            A sequence of triples where the first value contains the image to be masked,
            the second value contains the operation mask, and the third value contains the
            background image. The zero values of the mask indicate which pixels in the image
            should be set to the corresponding pixel values in the background.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects where all zero pixels in the mask
            have been replaced by the pixels in the background image.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.MaskPolygon">
            <summary>
            Represents an operator that applies a polygonal mask to each image in
            the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.MaskPolygon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.MaskPolygon"/> class.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.MergeBinaryRegions">
            <summary>
            Represents an operator that merges connected component collections in the
            sequence into a single collection.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.MergeBinaryRegions.Process(System.IObservable{System.Tuple{Bonsai.Vision.ConnectedComponentCollection,Bonsai.Vision.ConnectedComponentCollection}})">
            <summary>
            Merges connected component collections in an observable sequence into
            a single collection.
            </summary>
            <param name="source">
            A sequence of the connected component collection pairs to merge.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects
            representing the merged collections.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.MinimumEnclosingCircle">
            <summary>
            Represents an operator that finds the parameters of the circle with minimal
            area enclosing each set of 2D points in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.MinimumEnclosingCircle.Process(System.IObservable{OpenCV.Net.Point2f[]})">
            <summary>
            Finds the parameters of the circle with minimal area enclosing each array of
            points in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:OpenCV.Net.Point2f"/> arrays for which to find the minimum
            enclosing circle.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Circle"/> objects representing the parameters of
            the circle with minimal area enclosing each array of points.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.MinimumEnclosingCircle.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Finds the parameters of the circle with minimal area enclosing each array of
            points in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:OpenCV.Net.Mat"/> objects specifying the array of points
            for which to find the minimum enclosing circle.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Circle"/> objects representing the parameters of
            the circle with minimal area enclosing each array of points.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.MinimumEnclosingCircle.Process(System.IObservable{OpenCV.Net.Contour})">
            <summary>
            Finds the parameters of the circle with minimal area enclosing the array of
            points for each polygonal contour in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:OpenCV.Net.Contour"/> objects for which to find the minimum
            enclosing circle.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Circle"/> objects representing the parameters of
            the circle with minimal area enclosing each polygonal contour.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.MinimumEnclosingCircle.Process(System.IObservable{Bonsai.Vision.ConnectedComponentCollection})">
            <summary>
            Finds all the circles with minimal area enclosing each of the connected
            components in an observable sequence.
            </summary>
            <param name="source">
            The sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects
            representing the contours for which to find the minimum enclosing circle.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Circle"/> arrays representing the parameters of
            the circles with minimal area enclosing each connected component.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.MorphologicalOperator">
            <summary>
            Represents an operator that applies a morphological transformation kernel to
            each image in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.MorphologicalOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.MorphologicalOperator"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.MorphologicalOperator.Size">
            <summary>
            Gets or sets the size of the structuring element.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.MorphologicalOperator.Anchor">
            <summary>
            Gets or sets the anchor of the structuring element.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.MorphologicalOperator.Shape">
            <summary>
            Gets or sets the shape of the structuring element.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.MorphologicalOperator.Iterations">
            <summary>
            Gets or sets the number of times to apply the morphological operator.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.MorphologicalOperator.Operation">
            <summary>
            Gets or sets a value specifying the type of morphological operation
            to be applied.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.MorphologicalOperator.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Applies a morphological transformation kernel to each image in an
            observable sequence.
            </summary>
            <param name="source">
            The sequence of images for which to apply the morphological operator.
            </param>
            <returns>
            The sequence of transformed images.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Normalize">
            <summary>
            Represents an operator that normalizes the range of values for each image
            in the sequence to be between zero and one.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Normalize.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Normalizes the range of values for each image in an observable sequence
            to be between zero and one.
            </summary>
            <param name="source">The sequence of images to normalize.</param>
            <returns>
            The sequence of normalized images.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.OpticalFlow">
            <summary>
            Represents an operator that computes dense optical flow using Gunnar Farneback’s
            algorithm across all images in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.OpticalFlow.PyramidScale">
            <summary>
            Gets or sets a value specifying the image scale (less than 1) used to
            build the pyramids for each image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.OpticalFlow.Levels">
            <summary>
            Gets or sets the number of pyramid layers, including the initial image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.OpticalFlow.WindowSize">
            <summary>
            Gets or sets the averaging window size. Larger values increase robustness
            to noise and fast motion, but yield a blurred motion field.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.OpticalFlow.Iterations">
            <summary>
            Gets or sets the number of iterations of the algorithm at each pyramid level.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.OpticalFlow.PolyN">
            <summary>
            Gets or sets the size of the pixel neighborhood used to find polynomial
            expansion in each pixel.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.OpticalFlow.PolySigma">
            <summary>
            Gets or sets the standard deviation of the Gaussian used to smooth the
            derivatives used as a basis for the polynomial expansion.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.OpticalFlow.Flags">
            <summary>
            Gets or sets a value specifying the operation flags for the optical
            flow algorithm.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.OpticalFlow.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Computes dense optical flow using Gunnar Farneback’s algorithm across
            all images in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images across which to compute dense optical flow.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the flow field
            between the current and the previous image in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.OpticalFlow.Process(System.IObservable{System.Tuple{OpenCV.Net.IplImage,OpenCV.Net.IplImage}})">
            <summary>
            Computes dense optical flow using Gunnar Farneback’s algorithm across
            all image pairs in an observable sequence.
            </summary>
            <param name="source">
            The sequence of image pairs across which to compute the dense optical flow.
            The optical flow is computed from the first to the second image in the pair.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the flow field
            between the first and the second image of each pair in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.PolarTransform">
            <summary>
            Provides an abstract base class for operators that apply a polar transform
            to each image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.PolarTransform.Center">
            <summary>
            Gets or sets the transformation center where the output precision is maximal.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.PolarTransform.Magnitude">
            <summary>
            Gets or sets the magnitude scale parameter for the polar transformation.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.PolarTransform.Flags">
            <summary>
            Gets or sets a value specifying the interpolation and operation flags for
            the image warp.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.RangeThreshold">
            <summary>
            Represents an operator that tests which pixels lie within the specified
            range for each image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.RangeThreshold.Lower">
            <summary>
            Gets or sets the inclusive lower boundary of the range.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.RangeThreshold.Upper">
            <summary>
            Gets or sets the exclusive upper boundary of the range.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.RangeThreshold.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Tests which pixels lie within the specified range for each image in
            an observable sequence.
            </summary>
            <param name="source">
            The sequence of images to threshold. Each channel in a color image
            is tested independently according to the specified scalar range.
            </param>
            <returns>
            A sequence of binary images where each pixel is non-zero if the
            corresponding value in the original image is within the allowable range.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.RegionActivity">
            <summary>
            Represents information about activity detected inside a specified polygonal
            region of interest.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.RegionActivity.Roi">
            <summary>
            Gets or sets the array of vertices specifying the polygonal region
            of interest.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.RegionActivity.Rect">
            <summary>
            Gets or sets the bounding rectangle of the region of interest.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.RegionActivity.Activity">
            <summary>
            Gets or sets the total per-channel activity of pixels in the
            region of interest.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.RegionActivityCollection">
            <summary>
            Represents a collection of activity measurements corresponding to specific
            polygonal regions of interest.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.Resize">
            <summary>
            Represents an operator that resizes each image in the sequence to the
            specified size.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Resize.Size">
            <summary>
            Gets or sets the size of the output images.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Resize.Interpolation">
            <summary>
            Gets or sets a value specifying the interpolation method used to transform
            individual image pixels.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Resize.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Resizes each image in an observable sequence to the specified size.
            </summary>
            <param name="source">
            The sequence of images to resize.
            </param>
            <returns>
            The sequence of resized images.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.ResizeCanvas">
            <summary>
            Represents an operator that resizes the border around each image in the
            sequence without stretching the image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ResizeCanvas.Size">
            <summary>
            Gets or sets the size of the output image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ResizeCanvas.BorderType">
            <summary>
            Gets or sets a value specifying the type of border to create around
            the output image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ResizeCanvas.FillValue">
            <summary>
            Gets or sets the value to which constant border pixels will be set to.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ResizeCanvas.Offset">
            <summary>
            Gets or sets the optional top-left coordinates where the source image
            will be placed.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ResizeCanvas.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Resizes the border around each image in an observable sequence without
            stretching the image.
            </summary>
            <param name="source">
            The sequence of images for which to resize the border.
            </param>
            <returns>
            A sequence of images with the specified border size.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.RoiActivity">
            <summary>
            Represents an operator that calculates activation intensity inside specified
            regions of interest for each image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.RoiActivity.Regions">
            <summary>
            Gets or sets the polygonal regions of interest for which to calculate
            activation intensity.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.RoiActivity.Operation">
            <summary>
            Gets or sets a value specifying the reduction operation used to calculate
            activation intensity.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.RoiActivity.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Calculates activation intensity inside specified regions of interest for
            each image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images for which to calculate region of interest activation.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.RegionActivityCollection"/> containing the
            activation intensity inside the specified regions of interest for each
            image in the <paramref name="source"/> sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.RoiActivityDetected">
            <summary>
            Represents an operator that tests whether the activation intensity is above
            a given threshold for each specified region in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.RoiActivityDetected.Index">
            <summary>
            Gets or sets the index of the region of interest to test.
            </summary>
            <remarks>
            If no index is specified, the activity inside any specified region
            of interest will be considered.
            </remarks>
        </member>
        <member name="P:Bonsai.Vision.RoiActivityDetected.Threshold">
            <summary>
            Gets or sets the activity detection threshold.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.RoiActivityDetected.Process(System.IObservable{Bonsai.Vision.RegionActivityCollection})">
            <summary>
            Tests whether the activation intensity is above a given threshold for
            each specified region in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Vision.RegionActivityCollection"/> containing the
            regions of interest for which activation intensity was extracted.
            </param>
            <returns>
            A sequence of <see cref="T:System.Boolean"/> values indicating whether the
            activation intensity of the specified region of interest exceeded
            the activation threshold.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.SaveExtrinsics">
            <summary>
            Represents an operator that writes a sequence of camera extrinsics to a YML file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SaveExtrinsics.FileName">
            <summary>
            Gets or sets the name of the file on which to write the camera extrinsics.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SaveExtrinsics.Suffix">
            <summary>
            Gets or sets the optional suffix used to generate file names.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.SaveExtrinsics.Process(System.IObservable{Bonsai.Vision.Extrinsics})">
            <summary>
            Writes an observable sequence of camera extrinsic properties to the
            specified YML file.
            </summary>
            <param name="source">
            The sequence of camera extrinsic properties to write.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of writing the
            camera extrinsics to the specified YML file.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.SaveImage">
            <summary>
            Represents an operator that writes each image in the sequence to a file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SaveImage.FileName">
            <summary>
            Gets or sets the name of the file on which to write the images.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SaveImage.Suffix">
            <summary>
            Gets or sets the optional suffix used to generate file names.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.SaveImage.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Writes each image in an observable sequence to a file.
            </summary>
            <param name="source">
            The sequence of images to write.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of writing the
            images to the specified file.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.SaveIntrinsics">
            <summary>
            Represents an operator that writes a sequence of camera intrinsics to a YML file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SaveIntrinsics.FileName">
            <summary>
            Gets or sets the name of the file on which to write the camera intrinsics.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SaveIntrinsics.Suffix">
            <summary>
            Gets or sets the optional suffix used to generate file names.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.SaveIntrinsics.Process(System.IObservable{Bonsai.Vision.Intrinsics})">
            <summary>
            Writes an observable sequence of camera intrinsic properties to the
            specified YML file.
            </summary>
            <param name="source">
            The sequence of camera intrinsic properties to write.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of writing the
            camera intrinsics to the specified YML file.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.SaveIntrinsics.Process(System.IObservable{Bonsai.Vision.CameraCalibration})">
            <summary>
            Writes an observable sequence of camera intrinsic properties extracted from
            a camera calibration procedure to the specified YML file.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Vision.CameraCalibration"/> objects containing the camera
            intrinsic properties to write.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/>
            sequence but where there is an additional side effect of writing the
            calibrated camera intrinsics to the specified YML file.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.ScalarHistogram">
            <summary>
            Represents the per-channel histograms for all channels in a multi-channel array.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.ScalarHistogram.#ctor(OpenCV.Net.Histogram,OpenCV.Net.Histogram,OpenCV.Net.Histogram,OpenCV.Net.Histogram)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Vision.ScalarHistogram"/> class
            using the specified per-channel histograms.
            </summary>
            <param name="val0">The histogram for the first channel in the array.</param>
            <param name="val1">The histogram for the second channel in the array.</param>
            <param name="val2">The histogram for the third channel in the array.</param>
            <param name="val3">The histogram for the fourth channel in the array.</param>
        </member>
        <member name="P:Bonsai.Vision.ScalarHistogram.Val0">
            <summary>
            Gets the histogram for the first channel in the array.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ScalarHistogram.Val1">
            <summary>
            Gets the histogram for the second channel in the array.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ScalarHistogram.Val2">
            <summary>
            Gets the histogram for the third channel in the array.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.ScalarHistogram.Val3">
            <summary>
            Gets the histogram for the fourth channel in the array.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.Skeletonization">
            <summary>
            Represents an operator that extracts the topological skeleton of each
            image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Skeletonization.DistanceType">
            <summary>
            Gets or sets the function used to compute the distance transform for each pixel.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Skeletonization.LaplacianAperture">
            <summary>
            Gets or sets the size of the extended Sobel kernel used to compute derivatives.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Skeletonization.RidgeThreshold">
            <summary>
            Gets or sets the second-derivative cutoff used to isolate skeleton lines.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Skeletonization.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Extracts the topological skeleton of each image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images for which to extract the topological skeleton.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects where each non-zero pixel
            belongs to the extracted topological skeleton of the original image.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Smooth">
            <summary>
            Represents an operator that applies a smoothing operator to each image
            in the sequence. 
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Smooth.SmoothType">
            <summary>
            Gets or sets a value specifying the smoothing method to be applied.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Smooth.Size1">
            <summary>
            Gets or sets the aperture width of the smoothing kernel.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Smooth.Size2">
            <summary>
            Gets or sets the aperture height of the smoothing kernel.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Smooth.Sigma1">
            <summary>
            Gets or sets the standard deviation for the first dimension in the case of
            Gaussian smoothing.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Smooth.Sigma2">
            <summary>
            Gets or sets the standard deviation for the second dimension in the case of
            Gaussian smoothing.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Smooth.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Applies a smoothing operator to each image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images to smooth.
            </param>
            <returns>
            The sequence of smoothed images.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Sobel">
            <summary>
            Represents an operator that calculates the first, second, third or mixed
            image derivatives from the sequence using an extended Sobel operator.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Sobel.XOrder">
            <summary>
            Gets or sets the order of the horizontal derivative.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Sobel.YOrder">
            <summary>
            Gets or sets the order of the vertical derivative.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Sobel.ApertureSize">
            <summary>
            Gets or sets the size of the extended Sobel kernel.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Sobel.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Calculates the first, second, third or mixed image derivatives from
            an observable sequence using an extended Sobel operator.
            </summary>
            <param name="source">
            The sequence of images for which to calculate the image derivatives.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects representing the image
            derivatives of the original elements in the <paramref name="source"/>
            sequence.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.SolidColor">
            <summary>
            Represents an operator that generates a sequence with a single image
            where all pixels are set to the same color value.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SolidColor.Size">
            <summary>
            Gets or sets the size of the output image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SolidColor.Depth">
            <summary>
            Gets or sets the target bit depth of individual image pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SolidColor.Channels">
            <summary>
            Gets or sets the number of channels in the output image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SolidColor.Color">
            <summary>
            Gets or sets the color value to which all pixels in the output image
            will be set to.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.SolidColor.Generate">
            <summary>
            Generates an observable sequence with a single image where all pixels
            are set to the same color value.
            </summary>
            <returns>
            A sequence with a single <see cref="T:OpenCV.Net.IplImage"/> object with the specified
            pixel format and where all pixels are set to the same color value.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.SolidColor.Generate``1(System.IObservable{``0})">
            <summary>
            Generates an observable sequence of images where all pixels
            are set to the same color value, and where each new image is
            emitted only when an observable sequence emits a notification.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the notifications used for emitting new images.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects with the specified pixel
            format and where all pixels are set to the same color value.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.SolvePnP">
            <summary>
            Represents an operator that computes a sequence of camera extrinsics from
            sets of 3D-2D point correspondences and the specified camera intrinsics.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.SolvePnP.Process(System.IObservable{System.Tuple{OpenCV.Net.Point3d[],OpenCV.Net.Point2d[]}})">
            <summary>
            Computes an observable sequence of camera extrinsics from sets of 3D-2D
            point correspondences and the specified camera intrinsics.
            </summary>
            <param name="source">
            A sequence of 3D-2D point correspondences used to compute the camera
            extrinsics. For each 3D point in the first array, the corresponding 2D
            point in the second array represents the matching projection of that 3D
            point in the camera image.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Extrinsics"/> objects representing the camera
            extrinsics, such as position and rotation, computed from each set of
            3D-2D point correspondences.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.SolvePnP.Process(System.IObservable{System.Tuple{OpenCV.Net.Point3d[],OpenCV.Net.Point2d[],Bonsai.Vision.Extrinsics}})">
            <summary>
            Computes an observable sequence of camera extrinsics from sets of 3D-2D
            point correspondences, the specified camera intrinsics and an initial
            estimate of the camera extrinsics.
            </summary>
            <param name="source">
            A sequence of triplets containing the 3D-2D point correspondences and a
            prior estimate used to compute the camera extrinsics. For each 3D point
            in the first array, the corresponding 2D point in the second array
            represents the matching projection of that 3D point in the camera image.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.Extrinsics"/> objects representing the camera
            extrinsics, such as position and rotation, computed from each set of
            3D-2D point correspondences and an initial estimate of the extrinsics.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.SortBinaryRegions">
            <summary>
            Represents an operator that sorts each collection of binary regions in the
            sequence by descending order of area.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.SortBinaryRegions.Process(System.IObservable{Bonsai.Vision.ConnectedComponentCollection})">
            <summary>
            Sorts each collection of binary regions in an observable sequence by
            descending order of area.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects to sort.
            </param>
            <returns>
            A sequence containing the sorted <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/>
            objects, where the sequence of connected components is ordered by descending
            order of the area of each component.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.SparseOpticalFlow">
            <summary>
            Represents an operator that calculates the optical flow for each sparse
            feature set in the sequence, using the iterative Lucas-Kanade method.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SparseOpticalFlow.WindowSize">
            <summary>
            Gets or sets the size of the search window at each pyramid level.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SparseOpticalFlow.Level">
            <summary>
            Gets or sets the maximum pyramid level to use. If it is zero, pyramids are not used.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SparseOpticalFlow.MaxError">
            <summary>
            Gets or sets the optional maximum allowed tracking error for each feature.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SparseOpticalFlow.MaxIterations">
            <summary>
            Gets or sets the maximum number of iterations.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.SparseOpticalFlow.Epsilon">
            <summary>
            Gets or sets the minimum required accuracy for convergence.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.SparseOpticalFlow.Process(System.IObservable{Bonsai.Vision.KeyPointCollection})">
            <summary>
            Calculates the optical flow for each sparse feature set in an observable
            sequence, using the iterative Lucas-Kanade method.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Vision.KeyPointCollection"/> objects representing the
            sparse feature set over which to compute the optical flow. Each element
            of the sequence is compared with the previous element.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.KeyPointOpticalFlow"/> objects representing the
            sparse correspondences between subsequent sets of features in the original
            sequence.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.SparseOpticalFlow.Process(System.IObservable{System.Tuple{Bonsai.Vision.KeyPointCollection,OpenCV.Net.IplImage}})">
            <summary>
            Calculates the optical flow for each sparse feature set in an observable
            sequence, using the iterative Lucas-Kanade method, where each feature in
            the set is searched in the new image.
            </summary>
            <param name="source">
            A sequence of pairs where the first item is a <see cref="T:Bonsai.Vision.KeyPointCollection"/>
            object representing the set of features to find, and the second item is
            a target image on which the algorithm will try to find the features.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.KeyPointOpticalFlow"/> objects representing the
            sparse correspondences between each set of features in the sequence and
            a target image.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.TakeBinaryRegions">
            <summary>
            Represents an operator that takes the specified number of binary regions from
            each collection in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.TakeBinaryRegions.Count">
            <summary>
            Gets or sets the number of binary regions to take.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.TakeBinaryRegions.Process(System.IObservable{Bonsai.Vision.ConnectedComponentCollection})">
            <summary>
            Takes the specified number of binary regions from each collection in an
            observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects from which
            to take the specified number of binary regions.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects, where
            each collection always contains the specified number of binary regions.
            If the corresponding collection in the original sequence does not have
            enough regions, the missing elements are set to the empty region.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.TakeBinaryRegions.Process(System.IObservable{System.Collections.Generic.IEnumerable{Bonsai.Vision.ConnectedComponent}})">
            <summary>
            Takes the specified number of binary regions from each collection in an
            observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Vision.ConnectedComponent"/> collection objects from which
            to take the specified number of binary regions.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Vision.ConnectedComponentCollection"/> objects, where
            each collection always contains the specified number of binary regions.
            If the corresponding collection in the original sequence does not have
            enough regions, the missing elements are set to the empty region.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Threshold">
            <summary>
            Represents an operator that applies a fixed threshold to each image
            in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Threshold.ThresholdValue">
            <summary>
            Gets or sets the threshold value used to test individual pixels.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Threshold.MaxValue">
            <summary>
            Gets or sets the value assigned to pixels determined to be above the threshold.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.Threshold.ThresholdType">
            <summary>
            Gets or sets the type of threshold to apply to individual pixels.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Threshold.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Applies a fixed threshold to each image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images to threshold.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.IplImage"/> objects where each non-zero pixel represents
            a value in the original image that was accepted by the threshold criteria.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.Undistort">
            <summary>
            Represents an operator that undistorts each image in the sequence using
            the specified camera intrinsics.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.Undistort.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Undistorts each image in an observable sequence using the specified
            camera intrinsics.
            </summary>
            <param name="source">
            The sequence of images to undistort.
            </param>
            <returns>
            The sequence of undistorted images.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.UndistortPoints">
            <summary>
            Represents an operator that undistorts each point coordinate in the sequence
            using the specified camera intrinsics.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.UndistortPoints.Process(System.IObservable{OpenCV.Net.Point2f})">
            <summary>
            Undistorts each point coordinate in an observable sequence using the
            specified camera intrinsics.
            </summary>
            <param name="source">
            The sequence of points to undistort using the camera intrinsics.
            </param>
            <returns>
            A sequence of points where each value represents the point corresponding
            to the original sequence, if it were projected in the undistorted image
            obtained by the specified camera intrinsics.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.UndistortPoints.Process(System.IObservable{OpenCV.Net.Point2f[]})">
            <summary>
            Undistorts each array of points in an observable sequence using the
            specified camera intrinsics.
            </summary>
            <param name="source">
            The sequence of arrays of points to undistort using the camera intrinsics.
            </param>
            <returns>
            A sequence of arrays of points where each value represents the point
            corresponding in the original array, if it were projected in the
            undistorted image obtained by the specified camera intrinsics.
            </returns>
        </member>
        <member name="M:Bonsai.Vision.UndistortPoints.Process(System.IObservable{OpenCV.Net.Mat})">
            <summary>
            Undistorts each matrix of points in an observable sequence using the
            specified camera intrinsics.
            </summary>
            <param name="source">
            A sequence of <see cref="T:OpenCV.Net.Mat"/> values representing a row or column
            vector of points to undistort using the camera intrinsics.
            </param>
            <returns>
            A sequence of <see cref="T:OpenCV.Net.Mat"/> objects where each value represents a
            row or column vector of points which correspond to the original matrix,
            if each point was projected in the undistorted image obtained by the
            specified camera intrinsics.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.VideoWriter">
            <summary>
            Represents an operator that writes a sequence of images into a compressed AVI file.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.VideoWriter.FourCC">
            <summary>
            Gets or sets a value specifying the four-character code of the codec
            used to compress video frames.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.VideoWriter.FrameRate">
            <summary>
            Gets or sets a value specifying the playback frame rate of the image sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.VideoWriter.FrameSize">
            <summary>
            Gets or sets the optional size of video frames.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.VideoWriter.ResizeInterpolation">
            <summary>
            Gets or sets a value specifying the optional interpolation method used
            to resize video frames.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.VideoWriter.CreateWriter(System.String,OpenCV.Net.IplImage)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Vision.VideoWriter.Write(Bonsai.Vision.VideoWriterDisposable,OpenCV.Net.IplImage)">
            <summary>
            Writes an image into the compressed AVI file.
            </summary>
            <param name="writer">
            The <see cref="T:Bonsai.Vision.VideoWriterDisposable"/> object used to write data into the AVI file.
            </param>
            <param name="input">
            An <see cref="T:OpenCV.Net.IplImage"/> object containing the video data to write into the file.
            </param>
        </member>
        <member name="T:Bonsai.Vision.VideoWriterDisposable">
            <summary>
            Represents a disposable reference to a video writer resource.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.VideoWriterDisposable.Writer">
            <summary>
            Gets the reference to the disposable video writer instance.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.VideoWriterDisposable.FrameSize">
            <summary>
            Gets the size of individual video frames.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.VideoWriterDisposable.IsDisposed">
            <summary>
            Gets a value indicating whether the video writer has been disposed.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.VideoWriterDisposable.Dispose">
            <summary>
            Closes the video writer resource, which will flush all remaining data
            to disk and prevent further writes.
            </summary>
        </member>
        <member name="T:Bonsai.Vision.WarpAffine">
            <summary>
            Represents an operator that applies an affine transformation to each image
            in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.WarpAffine.Transform">
            <summary>
            Gets or sets the 2x3 affine transformation matrix.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.WarpAffine.TransformXml">
            <summary>
            Gets or sets an XML representation of the affine transformation matrix
            for serialization.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.WarpAffine.Flags">
            <summary>
            Gets or sets a value specifying the interpolation and operation flags
            for the image warp.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.WarpAffine.FillValue">
            <summary>
            Gets or sets the value to which all outlier pixels will be set to.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.WarpAffine.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Applies an affine transformation to each image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images to warp.
            </param>
            <returns>
            The sequence of warped images.
            </returns>
        </member>
        <member name="T:Bonsai.Vision.WarpPerspective">
            <summary>
            Represents an operator that applies a perspective transformation to each
            image in the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.WarpPerspective.Source">
            <summary>
            Gets or sets the coordinates of the four source quadrangle vertices
            in the input image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.WarpPerspective.Destination">
            <summary>
            Gets or sets the coordinates of the four corresponding quadrangle
            vertices in the output image.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.WarpPerspective.Flags">
            <summary>
            Gets or sets a value specifying the interpolation and operation flags
            for the image warp.
            </summary>
        </member>
        <member name="P:Bonsai.Vision.WarpPerspective.FillValue">
            <summary>
            Gets or sets the value to which all outlier pixels will be set to.
            </summary>
        </member>
        <member name="M:Bonsai.Vision.WarpPerspective.Process(System.IObservable{OpenCV.Net.IplImage})">
            <summary>
            Applies a perspective transformation to each image in an observable sequence.
            </summary>
            <param name="source">
            The sequence of images to warp.
            </param>
            <returns>
            The sequence of warped images.
            </returns>
        </member>
    </members>
</doc>
