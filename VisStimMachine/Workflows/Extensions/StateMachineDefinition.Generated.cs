//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace StateMachineDefinition
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class GratingsDefinition
    {
    
        private GratingsDefinitionName _name;
    
        private double _temporalFrequency;
    
        public GratingsDefinition()
        {
        }
    
        protected GratingsDefinition(GratingsDefinition other)
        {
            _name = other._name;
            _temporalFrequency = other._temporalFrequency;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public GratingsDefinitionName Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="temporalFrequency")]
        public double TemporalFrequency
        {
            get
            {
                return _temporalFrequency;
            }
            set
            {
                _temporalFrequency = value;
            }
        }
    
        public System.IObservable<GratingsDefinition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new GratingsDefinition(this)));
        }
    
        public System.IObservable<GratingsDefinition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new GratingsDefinition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("temporalFrequency = " + _temporalFrequency);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CheckerboardDefinition
    {
    
        private CheckerboardDefinitionName _name;
    
        private double _spatialFrequency;
    
        public CheckerboardDefinition()
        {
        }
    
        protected CheckerboardDefinition(CheckerboardDefinition other)
        {
            _name = other._name;
            _spatialFrequency = other._spatialFrequency;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public CheckerboardDefinitionName Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="spatialFrequency")]
        public double SpatialFrequency
        {
            get
            {
                return _spatialFrequency;
            }
            set
            {
                _spatialFrequency = value;
            }
        }
    
        public System.IObservable<CheckerboardDefinition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CheckerboardDefinition(this)));
        }
    
        public System.IObservable<CheckerboardDefinition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CheckerboardDefinition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("spatialFrequency = " + _spatialFrequency);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ColorDefinition
    {
    
        private ColorDefinitionName _name;
    
        private Color _color;
    
        public ColorDefinition()
        {
        }
    
        protected ColorDefinition(ColorDefinition other)
        {
            _name = other._name;
            _color = other._color;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public ColorDefinitionName Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="color")]
        public Color Color
        {
            get
            {
                return _color;
            }
            set
            {
                _color = value;
            }
        }
    
        public System.IObservable<ColorDefinition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ColorDefinition(this)));
        }
    
        public System.IObservable<ColorDefinition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ColorDefinition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("color = " + _color);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Color
    {
    
        private double _r;
    
        private double _g;
    
        private double _b;
    
        public Color()
        {
        }
    
        protected Color(Color other)
        {
            _r = other._r;
            _g = other._g;
            _b = other._b;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="R")]
        public double R
        {
            get
            {
                return _r;
            }
            set
            {
                _r = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="G")]
        public double G
        {
            get
            {
                return _g;
            }
            set
            {
                _g = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="B")]
        public double B
        {
            get
            {
                return _b;
            }
            set
            {
                _b = value;
            }
        }
    
        public System.IObservable<Color> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Color(this)));
        }
    
        public System.IObservable<Color> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Color(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("R = " + _r + ", ");
            stringBuilder.Append("G = " + _g + ", ");
            stringBuilder.Append("B = " + _b);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class TimerDefinition
    {
    
        private TimerDefinitionName _name;
    
        private double _dueTime;
    
        public TimerDefinition()
        {
        }
    
        protected TimerDefinition(TimerDefinition other)
        {
            _name = other._name;
            _dueTime = other._dueTime;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public TimerDefinitionName Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="dueTime")]
        public double DueTime
        {
            get
            {
                return _dueTime;
            }
            set
            {
                _dueTime = value;
            }
        }
    
        public System.IObservable<TimerDefinition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new TimerDefinition(this)));
        }
    
        public System.IObservable<TimerDefinition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new TimerDefinition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("dueTime = " + _dueTime);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class WaitKeyDefinition
    {
    
        private WaitKeyDefinitionName _name;
    
        private string _keyCode;
    
        public WaitKeyDefinition()
        {
        }
    
        protected WaitKeyDefinition(WaitKeyDefinition other)
        {
            _name = other._name;
            _keyCode = other._keyCode;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        public WaitKeyDefinitionName Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="keyCode")]
        public string KeyCode
        {
            get
            {
                return _keyCode;
            }
            set
            {
                _keyCode = value;
            }
        }
    
        public System.IObservable<WaitKeyDefinition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new WaitKeyDefinition(this)));
        }
    
        public System.IObservable<WaitKeyDefinition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new WaitKeyDefinition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("keyCode = " + _keyCode);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class StateDefinition
    {
    
        private string _alias;
    
        private ColorDefinition _visualStimulus;
    
        private TimerDefinition _transitionsOn;
    
        private string _transitionsTo;
    
        public StateDefinition()
        {
        }
    
        protected StateDefinition(StateDefinition other)
        {
            _alias = other._alias;
            _visualStimulus = other._visualStimulus;
            _transitionsOn = other._transitionsOn;
            _transitionsTo = other._transitionsTo;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="alias")]
        public string Alias
        {
            get
            {
                return _alias;
            }
            set
            {
                _alias = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="visualStimulus")]
        public ColorDefinition VisualStimulus
        {
            get
            {
                return _visualStimulus;
            }
            set
            {
                _visualStimulus = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="transitionsOn")]
        public TimerDefinition TransitionsOn
        {
            get
            {
                return _transitionsOn;
            }
            set
            {
                _transitionsOn = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="transitionsTo")]
        public string TransitionsTo
        {
            get
            {
                return _transitionsTo;
            }
            set
            {
                _transitionsTo = value;
            }
        }
    
        public System.IObservable<StateDefinition> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new StateDefinition(this)));
        }
    
        public System.IObservable<StateDefinition> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new StateDefinition(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("alias = " + _alias + ", ");
            stringBuilder.Append("visualStimulus = " + _visualStimulus + ", ");
            stringBuilder.Append("transitionsOn = " + _transitionsOn + ", ");
            stringBuilder.Append("transitionsTo = " + _transitionsTo);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class StateMachine
    {
    
        private string _ruleAlias = "undefined";
    
        private System.Collections.Generic.List<StateDefinition> _stateDefinitions = new System.Collections.Generic.List<StateDefinition>();
    
        public StateMachine()
        {
        }
    
        protected StateMachine(StateMachine other)
        {
            _ruleAlias = other._ruleAlias;
            _stateDefinitions = other._stateDefinitions;
        }
    
        /// <summary>
        /// The name or alias of this rule
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="ruleAlias")]
        [System.ComponentModel.DescriptionAttribute("The name or alias of this rule")]
        public string RuleAlias
        {
            get
            {
                return _ruleAlias;
            }
            set
            {
                _ruleAlias = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="stateDefinitions")]
        public System.Collections.Generic.List<StateDefinition> StateDefinitions
        {
            get
            {
                return _stateDefinitions;
            }
            set
            {
                _stateDefinitions = value;
            }
        }
    
        public System.IObservable<StateMachine> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new StateMachine(this)));
        }
    
        public System.IObservable<StateMachine> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new StateMachine(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("ruleAlias = " + _ruleAlias + ", ");
            stringBuilder.Append("stateDefinitions = " + _stateDefinitions);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    public enum GratingsDefinitionName
    {
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Grating")]
        Grating = 0,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    public enum CheckerboardDefinitionName
    {
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Checkerboard")]
        Checkerboard = 0,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    public enum ColorDefinitionName
    {
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Color")]
        Color = 0,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    public enum TimerDefinitionName
    {
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="Timer")]
        Timer = 0,
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    public enum WaitKeyDefinitionName
    {
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="WaitKey")]
        WaitKey = 0,
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<GratingsDefinition> source)
        {
            return Process<GratingsDefinition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CheckerboardDefinition> source)
        {
            return Process<CheckerboardDefinition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<ColorDefinition> source)
        {
            return Process<ColorDefinition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Color> source)
        {
            return Process<Color>(source);
        }

        public System.IObservable<string> Process(System.IObservable<TimerDefinition> source)
        {
            return Process<TimerDefinition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<WaitKeyDefinition> source)
        {
            return Process<WaitKeyDefinition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StateDefinition> source)
        {
            return Process<StateDefinition>(source);
        }

        public System.IObservable<string> Process(System.IObservable<StateMachine> source)
        {
            return Process<StateMachine>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<GratingsDefinition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CheckerboardDefinition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ColorDefinition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Color>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<TimerDefinition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<WaitKeyDefinition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StateDefinition>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<StateMachine>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<StateMachine>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}